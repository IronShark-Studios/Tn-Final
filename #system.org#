#+TITLE: System Tangle File
#+DESCRIPTION: Temporary file containt all shared files for a nix flake. Go be re organized later.
#+PROPERTY: :tangle yes :noweb yes

* System

** NixOS
This section contains all root level or otherwise system wide configuration settings.

*** configuration.nix
:PROPERTIES:
:header-args: :tangle ./System/NixOS/configuration.nix
:END:

#+begin_src nix
{ inputs, outputs, lib, config, pkgs, ... }: {

  system.stateVersion = "23.05";

  imports = [
    ./hardware-configuration.nix
    ./Sub-Modules/nixpkgs.nix
    ./Sub-Modules/users.nix
    ./Sub-Modules/utf.nix
    ./Sub-Modules/system-pkgs.nix
    ./Sub-Modules/services-exwm.nix
    ./Sub-Modules/services-xserver.nix
    ./Sub-Modules/network.nix
  ];

  boot = {
    kernelPackages = pkgs.linuxPackages_latest;
    loader = {
      systemd-boot.enable = true;
      efi = {
        canTouchEfiVariables = true;
        efiSysMountPoint = "/boot";
      };
    };
  };

  systemd = {
    # sleep.extraConfig = ''
    #   HandleSuspend=ignore
    # '';
    user.services.screenLocker = {
      description = "Activates SLock on lid close";
      serviceConfig = {
        Type = "simple";
        ExecStart = "${pkgs.slock}/run/current-system/sw/bin/slock";
      };
      wantedBy = [ "multi-user.target" ];
    };
  };
}
#+end_src

*** hardware-configuration.nix
:PROPERTIES:
:header-args: :tangle ./System/NixOS/hardware-configuration.nix
:END:
This file is copied from =/etc/nixos/hardware-configuration.nix= and dropped into this location as part of any fresh install. At some point I would like to be able to standardize it.

#+begin_src nix
{ config, lib, pkgs, modulesPath, ... }: {

  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "ehci_pci" "ahci" "usbhid" "usb_storage" "sd_mod" "sdhci_pci" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/2e4e98d9-7163-4275-8066-9f2bca5ecc63";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/2A2B-1368";
      fsType = "vfat";
    };

  swapDevices =
    [ { device = "/dev/disk/by-uuid/410045fc-1868-40b1-bae1-3121ef069c42"; }
    ];

  networking.useDHCP = lib.mkDefault true;
  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault      config.hardware.enableRedistributableFirmware;
}
#+end_src

*** Sub-Modules

**** users.nix
:PROPERTIES:
:header-args: :tangle ./System/NixOS/Sub-Modules/users.nix
:END:

#+begin_src nix
{ inputs, outputs, config, lib, pkgs, modulesPath, ... }: {

  environment.etc.secrets.source = ../Tools/Secrets;

  environment.etc.scripts.source = ../Tools/Scripts;

  security = {
    sudo.wheelNeedsPassword = false;
    rtkit.enable = true;
  };

  users = {
    mutableUsers = false;
    users = {
      root = {
        passwordFile = "/etc/secrets/root/root-usrPasswd.nix";
      };

      xin = {
        isNormalUser = true;
        openssh.authorizedKeys.keys = [ ];
        extraGroups = [ "wheel" ];
        passwordFile = "/etc/secrets/xin/xin-usrPasswd.nix";
      };
    };
  };

  home-manager = {
    extraSpecialArgs = { inherit inputs outputs; };
    users = {
      xin = import ../../Home-Manager/xin-home.nix;
    };
  };
}
#+end_src

**** utf.nix
:PROPERTIES:
:header-args: :tangle ./System/NixOS/Sub-Modules/utf.nix
:END:

#+begin_src nix
{ inputs, outputs, lib, config, pkgs, ... }: {

  time.timeZone = "America/Detroit";
  i18n = {
    defaultLocale = "en_US.UTF-8";
    extraLocaleSettings = {
      LC_ADDRESS = "en_US.UTF-8";
      LC_IDENTIFICATION = "en_US.UTF-8";
      LC_MEASUREMENT = "en_US.UTF-8";
      LC_MONETARY = "en_US.UTF-8";
      LC_NAME = "en_US.UTF-8";
      LC_NUMERIC = "en_US.UTF-8";
      LC_PAPER = "en_US.UTF-8";
      LC_TELEPHONE = "en_US.UTF-8";
      LC_TIME = "en_US.UTF-8";
    };
  };
}
#+end_src

**** nixpkgs.nix
:PROPERTIES:
:header-args: :tangle ./System/NixOS/Sub-Modules/nixpkgs.nix
:END:

#+begin_src nix
{ inputs, outputs, lib, config, pkgs, ... }: {

  nixpkgs = {
    overlays = [
      outputs.overlays.additions
      outputs.overlays.modifications
      outputs.overlays.static-nxpkgs
      outputs.overlays.static-hmpkgs
      inputs.emacs-community.overlay
    ];

    config = {
      allowUnfree = true;
      hostPlatform = lib.mkDefault "x86_64-linux";
    };
  };


  nix = {
    registry = lib.mapAttrs (_: value: { flake = value; }) inputs;
    nixPath = lib.mapAttrsToList (key: value: "${key}=${value.to.path}") config.nix.registry;
    settings = {
      experimental-features = "nix-command flakes";
      auto-optimise-store = true;
    };
  };
}
#+end_src

**** system-pkgs.nix
:PROPERTIES:
:header-args: :tangle ./System/NixOS/Sub-Modules/system-pkgs.nix
:END:

#+begin_src nix
{ inputs, outputs, lib, config, pkgs, ... }: {

  environment = {
    systemPackages = with pkgs; [
      pulseaudio
      pulseaudio-ctl
      pulsemixer
      pavucontrol
      xclip
      xcolor
      xdo
      xdotool
      xsel
      polybar
      networkmanagerapplet
      volctl
      lm_sensors
      pciutils
      fd
      silver-searcher
      wget
      unzip
      hunspell
      hunspellDicts.en_US-large
      slock
      flameshot
    ];
  };

  fonts.packages = with pkgs; [
    nerdfonts
    iosevka
    overpass
    fira-code
    fira-go
  ];
}
#+end_src

**** services-exwm.nix
:PROPERTIES:
:header-args: :tangle ./System/NixOS/Sub-Modules/services-exwm.nix
:END:

#+begin_src nix
{ inputs, outputs, lib, config, pkgs, ... }: {

#   services.xserver.windowManager.exwm = {
#    enable = true;
#    enableDefaultConfig = false;
#    extraPackages = epkgs: with epkgs; [
#      use-package
#      exwm
#      burly
#      helm
#      helm-projectile
#      emojify
#      all-the-icons
#      ligature
#      centered-cursor-mode
#      rainbow-delimiters
#      smartparens
#      doom-modeline
#      doom-themes
#      evil
#      evil-snipe
#      evil-easymotion
#      evil-collection
#      evil-colemak-basics
#      helpful
#      which-key
#      undo-tree
#      dmenu
#      magit
#      git-gutter
#      projectile
#      ag
#      rg
#      nix-mode
#      org-bullets
#      org-appear
#      org
#      ox-hugo
#      visual-fill-column
#      aggressive-indent
#    ];
#  };
}
#+end_src

**** services-xserver.nix
:PROPERTIES:
:header-args: :tangle ./System/NixOS/Sub-Modules/services-xserver.nix
:END:

#+begin_src nix
{ inputs, outputs, lib, config, pkgs, ... }: {

  environment = {
    systemPackages = with pkgs; [
      blueman # GTK base bluetooth manager
      elementary-xfce-icon-theme
      gimp-with-plugins # Move into home-manager
      gnome.gnome-disk-utility # replace with Gparted in home-manager
      inkscape-with-extensions # Move into home-manager
      xfce.xfce4-appfinder
      xfce.xfce4-genmon-plugin
      xfce.xfce4-panel
      xfce.xfce4-pulseaudio-plugin
      xfce.xfce4-whiskermenu-plugin
      xfce.xfce4-xkb-plugin
      xfce.xfdashboard
      xorg.xev
      sddm-chili-theme
    ];
  };

  programs = {
    dconf.enable = true;
    gnupg.agent = {
      enable = true;
      enableSSHSupport = true;
    };

    thunar = {
      enable = true;
      plugins = with pkgs.xfce; [
        thunar-archive-plugin
        thunar-media-tags-plugin
        thunar-volman
      ];
    };
  };

  security.pam.services.gdm.enableGnomeKeyring = true;

  services = {
    blueman.enable = true;
    gnome.gnome-keyring.enable = true;
    pipewire = {
      enable = true;
      pulse.enable = true;
      alsa = {
        enable = true;
        support32Bit = true;
      };
    };

    xserver = {
      enable = true;
      libinput.enable = true;
      autorun = true;
      layout = "us";
      xkbVariant = "colemak_dh";
      xkbOptions = "caps:escape";
      excludePackages = with pkgs; [
        xterm
      ];

      displayManager = {
        sddm = {
          enable = true;
          autoNumlock = true;
          theme = "chili";
          };
      };

      desktopManager.xfce = {
        enable = true;
        enableScreensaver = false;
        noDesktop = true;
        enableXfwm = false;
      };
    };

    unclutter-xfixes.enable = true;
    picom.enable = true;
  };

  sound = {
    enable = true;
    mediaKeys.enable = true;
  };

  hardware = {
    pulseaudio.enable = false;
    bluetooth.enable = true;
  };
}
#+end_src

**** network.nix
:PROPERTIES:
:header-args: :tangle ./System/NixOS/Sub-Modules/network.nix
:END:

#+begin_src nix
{ inputs, outputs, lib, config, pkgs, ... }: {

  networking = {
    hostName = "thanatos";
    networkmanager.enable = true;
    useDHCP = lib.mkDefault true;
  };


  services = {
    openssh = {
      enable = false;
      settings = {
        permitRootLogin = "no";
        passwordAuthentication = false;
      };
    };

    printing.enable = true;
  };
}
#+end_src

*** Tools

**** Secrets

***** Root
:PROPERTIES:
:header-args: :tangle ./System/NixOS/Tools/Secrets/root/root-usrPasswd.nix
:END:

#+begin_src nix
$6$KY5i2kUTspBbJUVy$2P5N9ks4kNpW5iKRRCNUX9FmTvwUKC4mkPfpWchiBFMuBHHJoa2/le4H3KxhYGOs/w6d4nQeFJIz/s9XnCjIJ0
#+end_src

***** Xin
:PROPERTIES:
:header-args: :tangle ./System/NixOS/Tools/Secrets/xin/xin-usrPasswd.nix
:END:
#+begin_src nix
$6$KY5i2kUTspBbJUVy$2P5N9ks4kNpW5iKRRCNUX9FmTvwUKC4mkPfpWchiBFMuBHHJoa2/le4H3KxhYGOs/w6d4nQeFJIz/s9XnCjIJ0
#+end_src

**** Scripts

***** placeholder
:PROPERTIES:
:header-args: :tangle ./System/NixOS/Tools/Scripts/placeholder.txt
:END:

#+begin_src txt
place holder file
#+end_src

** Home-Manager

*** xin-home.nix
:PROPERTIES:
:header-args: :tangle ./System/Home-Manager/xin-home.nix
:END:

#+begin_src nix
# This is your home-manager configuration file
# Use this to configure your home environment (it replaces ~/.config/nixpkgs/home.nix)

{ inputs, outputs, lib, config, pkgs, ... }: {
  imports = [
    ./Home-Packages/home-manager.nix
    ./Home-Packages/Emacs/emacs.nix
    ./Home-Packages/Emacs/exwm.nix
    ./Home-Packages/alacritty.nix
    ./Home-Packages/firefox.nix
    ./Home-Packages/bash.nix
    ./Home-Packages/git.nix
    ./Home-Packages/polybar.nix
  ];

  programs.home-manager.enable = true;

  home = {
    username = "xin";
    homeDirectory = "/home/xin";
    stateVersion = "23.05";
  };

  nixpkgs = {
    overlays = [
      outputs.overlays.additions
      outputs.overlays.modifications
      outputs.overlays.static-nxpkgs
      outputs.overlays.static-hmpkgs
      inputs.emacs-community.overlay
    ];

    config = {
      allowUnfree = true;
      allowUnfreePredicate = (_: true);
    };
  };

  systemd.user.startServices = "sd-switch";
}
#+end_src

*** Home-Packages

**** home-manager.nix
:PROPERTIES:
:header-args: :tangle ./System/Home-Manager/Home-Packages/home-manager.nix
:END:

#+begin_src nix
{ inputs, outputs, lib, config, pkgs, ... }: {

  programs.home-manager = {
    enable = true;
  };
}
#+end_src

**** alacritty.nix
:PROPERTIES:
:header-args: :tangle ./System/Home-Manager/Home-Packages/alacritty.nix
:END:

#+begin_src nix
{ inputs, outputs, lib, config, pkgs, ... }: {

  programs.alacritty = {
    enable = true;
    settings = {
    };
  };
}
#+end_src

**** bash.nix
:PROPERTIES:
:header-args: :tangle ./System/Home-Manager/Home-Packages/bash.nix
:END:

#+begin_src nix
{ inputs, outputs, lib, config, pkgs, ... }: {

  programs.bash = {
    enable = true;

    shellAliases = {
      lx = "ls -la";
      rma = "rm -rf";
      power-off = "sudo shutdown -h now";
      logout = "sudo kill -9 -1";
      restart = "sudo reboot";
      eo = "emacsclient -n";
      seo = ''SUDO_EDITOR=\"emacsclient\" sudo -e'';
      rebuild = "bash ~/.config/system-scripts/flake-rebuild.sh";
      upgrade = "bash ~/.config/system-scripts/flake-upgrade.sh";
      rebuild-reboot = "rebuild && reboot";
      clean = "sudo nix-collect-garbage --delete-old && rebuild";
      reboot-clean = "sudo nix-collect-garbage --delete-old && rebuild-reboot";
      clipboard = "xclip -selection clipboard";
    };

    sessionVariables = {
      WEBKIT_DISABLE_COMPOSITING_MODE=1;
    };

    profileExtra = ''
      emacs
    '';
  };
}
#+end_src

**** firefox.nix
:PROPERTIES:
:header-args: :tangle ./System/Home-Manager/Home-Packages/firefox.nix
:END:

#+begin_src nix
{ inputs, outputs, lib, config, pkgs, ... }: {

  programs.firefox = {
    enable = true;
    # package = pkgs.firefox.override {
    #   cfg = {
    #     enableTridactylNative = true;
    #   };
    # };
    profiles.xin = {
      isDefault = true;
      userChrome = ''

/* Source file https://github.com/MrOtherGuy/firefox-csshacks/tree/master/chrome/navbar_tabs_oneliner.css made available under Mozilla Public License v. 2.0
See the above repository for updates as well as full license text. */

/* Make tabs and navbar appear side-by-side tabs on right */

/* Use page_action_buttons_on_hover.css to hide page-action-buttons to save more space for the address */

/*
urlbar_popup_full_width.css is VERY MUCH recommended for Firefox 71+ because of new urlbar popup
*/

:root[uidensity="compact"]{
  --tab-block-margin: 2px !important;
      }

/* Modify these to change relative widths or default height */
#navigator-toolbox{
  --uc-navigationbar-width: 40vw;
  --uc-toolbar-height: 40px;
  --uc-urlbar-min-width: 50vw; /* minimum width for opened urlbar */
}

#scrollbutton-up,
#scrollbutton-down{ border-block-width: 2px !important; }

/* Override for other densities */
:root[uidensity="compact"] #navigator-toolbox{ --uc-toolbar-height: 34px; }
:root[uidensity="touch"] #navigator-toolbox{ --uc-toolbar-height: 44px; }

/* prevent urlbar overflow on narrow windows */
/* Dependent on how many items are in navigation toolbar ADJUST AS NEEDED */
@media screen and (max-width: 1500px){
  #urlbar-container{ min-width:unset !important }
}

#TabsToolbar{
  margin-left: var(--uc-navigationbar-width);
  --tabs-navbar-shadow-size: 0px;
}
#tabbrowser-tabs{
  --tab-min-height: calc(var(--uc-toolbar-height) - 2 * var(--tab-block-margin,0px)) !important;
}

/* This isn't useful when tabs start in the middle of the window */

.titlebar-spacer[type="pre-tabs"]{ display: none }

#navigator-toolbox > #nav-bar{
  margin-right:calc(100vw - var(--uc-navigationbar-width));
  margin-top: calc(0px - var(--uc-toolbar-height));
}

/* Window drag space  */
:root[tabsintitlebar="true"] #nav-bar{ padding-left: 24px !important }

/* Rules specific to window controls on right layout */
@supports -moz-bool-pref("layout.css.osx-font-smoothing.enabled"){
  .titlebar-buttonbox-container{ position: fixed; display: block; left: 0px; z-index: 3; }
  :root[tabsintitlebar="true"] #nav-bar{ padding-left: 96px !important; padding-right: 0px !important; }
}

/* 1px margin on touch density causes tabs to be too high */
.tab-close-button{ margin-top: 0 !important }

/* Make opened urlbar overlay the toolbar */
#urlbar[open]:focus-within{ min-width: var(--uc-urlbar-min-width,none) !important; }

/* Hide dropdown placeholder */
#urlbar-container:not(:hover) .urlbar-history-dropmarker{ margin-inline-start: -28px; }

/* Fix customization view */
#customization-panelWrapper > .panel-arrowbox > .panel-arrow{ margin-inline-end: initial !important; }

/* Source file https://github.com/MrOtherGuy/firefox-csshacks/tree/master/chrome/autohide_main_toolbar.css made available under Mozilla Public License v. 2.0
See the above repository for updates as well as full license text. */

/* Source file https://github.com/MrOtherGuy/firefox-csshacks/tree/master/chrome/autohide_toolbox.css made available under Mozilla Public License v. 2.0
See the above repository for updates as well as full license text. */

/* Hide the whole toolbar area unless urlbar is focused or cursor is over the toolbar */
/* Dimensions on non-Win10 OS probably needs to be adjusted */

/* Compatibility options for hide_tabs_toolbar.css and tabs_on_bottom.css at the end of this file */

:root{
  --uc-autohide-toolbox-delay: 200ms; /* Wait 0.1s before hiding toolbars */
  --uc-toolbox-rotation: 82deg;  /* This may need to be lower on mac - like 75 or so */
}

:root[sizemode="maximized"]{
  --uc-toolbox-rotation: 88.5deg;
      }

@media  (-moz-platform: windows),
  (-moz-os-version: windows-win7),
  (-moz-os-version: windows-win10){

  #navigator-toolbox:not(:-moz-lwtheme){ background-color: -moz-dialog !important; }
  }

:root[sizemode="fullscreen"],
#navigator-toolbox[inFullscreen]{ margin-top: 0 !important; }

#navigator-toolbox{
  position: fixed !important;
  display: block;
  background-color: var(--lwt-accent-color,black) !important;
  transition: transform 82ms linear, opacity 82ms linear !important;
  transition-delay: var(--uc-autohide-toolbox-delay) !important;
  transform-origin: top;
  transform: rotateX(var(--uc-toolbox-rotation));
  opacity: 0;
  line-height: 0;
  z-index: 1;
  pointer-events: none;
}


/* #mainPopupSet:hover ~ box > toolbox, */
/* Uncomment the above line to make toolbar visible if some popup is hovered */
#navigator-toolbox:hover,
#navigator-toolbox:focus-within{
  transition-delay: 33ms !important;
  transform: rotateX(0);
  opacity: 1;
}

#navigator-toolbox > *{ line-height: normal; pointer-events: auto }

#navigator-toolbox,
#navigator-toolbox > *{
  width: 100vw;
  -moz-appearance: none !important;
}

/* These two exist for oneliner compatibility */
#nav-bar{ width: var(--uc-navigationbar-width,100vw) }
#TabsToolbar{ width: calc(100vw - var(--uc-navigationbar-width,0px)) }

/* Don't apply transform before window has been fully created */
:root:not([sessionrestored]) #navigator-toolbox{ transform:none !important }

:root[customizing] #navigator-toolbox{
  position: relative !important;
  transform: none !important;
  opacity: 1 !important;
}

#navigator-toolbox[inFullscreen] > #PersonalToolbar,
#PersonalToolbar[collapsed="true"]{ display: none }

/* Uncomment this if tabs toolbar is hidden with hide_tabs_toolbar.css */
 /*#titlebar{ margin-bottom: -9px }*/

/* Uncomment the following for compatibility with tabs_on_bottom.css - this isn't well tested though */
/*
#navigator-toolbox{ flex-direction: column; display: flex; }
#titlebar{ order: 2 }
*/

'';
    };
  };
}
#+end_src

**** git.nix
:PROPERTIES:
:header-args: :tangle ./System/Home-Manager/Home-Packages/git.nix
:END:

#+begin_src nix
{ inputs, outputs, lib, config, pkgs, ... }: {


  programs.git = {
    enable = true;
    package = pkgs.gitFull;
    lfs.enable = true;
    userName = "xin";
    userEmail = "git@ironshark.org";
    ignores = [
      "*~"
      ".*~"
      "#*#"
      "'#*#'"
      ".*.swp"
    ];
    aliases = {
      send = "! git status &&
echo -n \"Commit Message: \" &&
read -r commitMessage &&
git add . &&
git commit -m \"$commitMessage\" &&
git push";
    };
    extraConfig = {
      init = {
        defaultBranch = "main";
        pull = {
          rebase = true;
        };
      };
    };
  };
}
#+end_src

**** polybar.nix
:PROPERTIES:
:header-args: :tangle ./System/Home-Manager/Home-Packages/polybar.nix
:END:

#+begin_src nix
{ inputs, outputs, lib, config, pkgs, ... }: {

  services.polybar = {
      enable = true;
      script = "polybar thanatos &";
      settings = {
        "colors" = {
          background = "#191e24";
          foreground = "C5C8C6";
          primary = "#5ec4ff";
          secondary = "#8ABEB7";
          alert = "#d85362";
          disabled = "#707880";
        };
        "bar/thanatos" = {
          width = "100%";
          height = "24pt";
          background = "\${colors.background}";
          foreground = "\${colors.foreground}";
          line-size = "3pt";
          padding-right = "2";
          module-margin = "1";
          separator = "|";
          separator-foreground = "\${colors.disabled}";
          font-0 = ''"Iosevka:size=16:weight=extrabold;2"'';
          modules-left = "xworkspaces memory cpu cpu-temp";
          modules-right = "pulseaudio date battery";
          cursor-click = "pointer";
          cursor-scroll = "ns-resize";
          enable-ipc = "true";
        };
        "module/battery" = {
          type = "internal/battery";
          label-charging = "Charging %percentage%%";
          full-at = "98";
          low-at = "10";
          battery = "BAT0";
          adapter = "AC";
          poll-interval = "5";
        };
        "module/xworkspaces" = {
          type = "internal/xworkspaces";
          label-active = "%name%";
          label-active-background = "\${colors.background}";
          label-active-underline= "\${colors.primary}";
          label-active-padding = "1";
          label-occupied = "%name%";
          label-occupied-padding = "1";
          label-urgent = "%name%";
          label-urgent-background = "\${colors.alert}";
          label-urgent-padding = "1";
          label-empty = "%name%";
          label-empty-foreground = "\${colors.disabled}";
          label-empty-padding = "1";
        };
        "module/pulseaudio" = {
          type = "internal/pulseaudio";
          format-volume-prefix = "VOL ";
          format-volume-prefix-forground = "\${colors.primary}";
          format-volume = "<label-volume>";
          label-volume = "%percentage%%";
          label-muted = "muted";
          label-muted-foreground = "\${colors.disabled}";
        };
        "module/memory" = {
          type = "internal/memory";
          interval = "2";
          format-prefix = ''"RAM "'';
          format-prefix-foreground = "\${colors.primary}";
          label = "%percentage_used:2%%";
        };
        "module/cpu" = {
          type = "internal/cpu";
          interval = "2";
          format-prefix = ''"CPU "'';
          format-prefix-foreground = "\${colors.primary}";
          label = "%percentage:2%%";
        };
        "module/cpu-temp" = {
          type = "custom/script";
          interval = "2";
          exec = "~/.config/polybar/polybar-CPU-temp.sh";
        };
        "module/date" = {
          type = "internal/date";
          interval = "1";
          date = "%H:%M %Y-%m-%d %A";
          label = "%date%";
          label-foreground = "\${colors.forground}";
        };
        "module/backlight" = {
          type = "internal/backlight";
          format-prefix = "Brightness ";
          format-foreground = "\${colors.primary}";
          label = "%percentage%%";
        };
        "settings" = {
          screenchange-reload = "true";
          pseudo-transparency = "true";
        };
      };
  };

  home.file = {
    "polybar-CPU-temp.sh" = {
      target = ".config/polybar/polybar-CPU-temp.sh";
      executable = true;
      text = ''
    #!/bin/sh

    sensors | grep "Package id 0:" | tr -d '+' | awk '{print $4}'
  '';
    };
  };

}
#+end_src

**** Emacs

***** bookmarks
:PROPERTIES:
:header-args: :tangle ./System/Home-Manager/Home-Packages/Emacs/bookmarks
:END:

#+begin_src emacs-lisp
;;;; Emacs Bookmark Format Version 1;;;; -*- coding: utf-8-emacs; mode: lisp-data -*-
;;; This format is meant to be slightly human-readable;
;;; nevertheless, you probably don't want to edit it.
;;; -*- End Of Bookmark File Format Version Stamp -*-
(("Burly: center-focus-collumn"
 (url . "emacs+burly+windows:?%28%28%28min-height%20.%204%29%20%28min-width%20.%2030%29%20%28min-height-ignore%20.%203%29%20%28min-width-ignore%20.%2012%29%20%28min-height-safe%20.%201%29%20%28min-width-safe%20.%206%29%20%28min-pixel-height%20.%2064%29%20%28min-pixel-width%20.%20240%29%20%28min-pixel-height-ignore%20.%2036%29%20%28min-pixel-width-ignore%20.%2078%29%20%28min-pixel-height-safe%20.%2016%29%20%28min-pixel-width-safe%20.%2048%29%29%20hc%20%28pixel-width%20.%203840%29%20%28pixel-height%20.%201032%29%20%28total-width%20.%20480%29%20%28total-height%20.%2065%29%20%28normal-height%20.%201.0%29%20%28normal-width%20.%201.0%29%20%28combination-limit%29%20%28leaf%20%28pixel-width%20.%20960%29%20%28pixel-height%20.%201032%29%20%28total-width%20.%20120%29%20%28total-height%20.%2065%29%20%28normal-height%20.%201.0%29%20%28normal-width%20.%200.25%29%20%28parameters%20%28burly-url%20.%20%22emacs%2Bburly%2Bname%3A%2F%2F%3F%2Ascratch%2A%22%29%29%20%28buffer%20%22%2Ascratch%2A%22%20%28selected%29%20%28hscroll%20.%200%29%20%28fringes%205%205%20nil%20nil%29%20%28margins%20nil%29%20%28scroll-bars%20nil%200%20t%20nil%200%20t%20nil%29%20%28vscroll%20.%200%29%20%28dedicated%29%20%28point%20.%20146%29%20%28start%20.%201%29%29%29%20%28leaf%20%28pixel-width%20.%201920%29%20%28pixel-height%20.%201032%29%20%28total-width%20.%20240%29%20%28total-height%20.%2065%29%20%28normal-height%20.%201.0%29%20%28normal-width%20.%200.5%29%20%28parameters%20%28burly-url%20.%20%22emacs%2Bburly%2Bname%3A%2F%2F%3F%2Ascratch%2A%22%29%29%20%28buffer%20%22%2Ascratch%2A%22%20%28selected%20.%20t%29%20%28hscroll%20.%200%29%20%28fringes%205%205%20nil%20nil%29%20%28margins%20nil%29%20%28scroll-bars%20nil%200%20t%20nil%200%20t%20nil%29%20%28vscroll%20.%200%29%20%28dedicated%29%20%28point%20.%20146%29%20%28start%20.%201%29%29%29%20%28leaf%20%28last%20.%20t%29%20%28pixel-width%20.%20960%29%20%28pixel-height%20.%201032%29%20%28total-width%20.%20120%29%20%28total-height%20.%2065%29%20%28normal-height%20.%201.0%29%20%28normal-width%20.%200.25%29%20%28parameters%20%28burly-url%20.%20%22emacs%2Bburly%2Bname%3A%2F%2F%3F%2Ascratch%2A%22%29%29%20%28buffer%20%22%2Ascratch%2A%22%20%28selected%29%20%28hscroll%20.%200%29%20%28fringes%205%205%20nil%20nil%29%20%28margins%20nil%29%20%28scroll-bars%20nil%200%20t%20nil%200%20t%20nil%29%20%28vscroll%20.%200%29%20%28dedicated%29%20%28point%20.%20146%29%20%28start%20.%201%29%29%29%29")
 (handler . burly-bookmark-handler))
("Burly: right-focus-collumn"
 (url . "emacs+burly+windows:?%28%28%28min-height%20.%204%29%20%28min-width%20.%2020%29%20%28min-height-ignore%20.%203%29%20%28min-width-ignore%20.%208%29%20%28min-height-safe%20.%201%29%20%28min-width-safe%20.%204%29%20%28min-pixel-height%20.%2064%29%20%28min-pixel-width%20.%20160%29%20%28min-pixel-height-ignore%20.%2036%29%20%28min-pixel-width-ignore%20.%2052%29%20%28min-pixel-height-safe%20.%2016%29%20%28min-pixel-width-safe%20.%2032%29%29%20hc%20%28pixel-width%20.%203840%29%20%28pixel-height%20.%201032%29%20%28total-width%20.%20480%29%20%28total-height%20.%2065%29%20%28normal-height%20.%201.0%29%20%28normal-width%20.%201.0%29%20%28combination-limit%29%20%28leaf%20%28pixel-width%20.%201280%29%20%28pixel-height%20.%201032%29%20%28total-width%20.%20160%29%20%28total-height%20.%2065%29%20%28normal-height%20.%201.0%29%20%28normal-width%20.%200.3333333333333333%29%20%28parameters%20%28burly-url%20.%20%22emacs%2Bburly%2Bname%3A%2F%2F%3F%2Ascratch%2A%22%29%29%20%28buffer%20%22%2Ascratch%2A%22%20%28selected%29%20%28hscroll%20.%200%29%20%28fringes%205%205%20nil%20nil%29%20%28margins%20nil%29%20%28scroll-bars%20nil%200%20t%20nil%200%20t%20nil%29%20%28vscroll%20.%200%29%20%28dedicated%29%20%28point%20.%20146%29%20%28start%20.%201%29%29%29%20%28leaf%20%28last%20.%20t%29%20%28pixel-width%20.%202560%29%20%28pixel-height%20.%201032%29%20%28total-width%20.%20320%29%20%28total-height%20.%2065%29%20%28normal-height%20.%201.0%29%20%28normal-width%20.%200.6666666666666666%29%20%28parameters%20%28burly-url%20.%20%22emacs%2Bburly%2Bname%3A%2F%2F%3F%2Ascratch%2A%22%29%29%20%28buffer%20%22%2Ascratch%2A%22%20%28selected%20.%20t%29%20%28hscroll%20.%200%29%20%28fringes%205%205%20nil%20nil%29%20%28margins%20nil%29%20%28scroll-bars%20nil%200%20t%20nil%200%20t%20nil%29%20%28vscroll%20.%200%29%20%28dedicated%29%20%28point%20.%20146%29%20%28start%20.%201%29%29%29%29")
 (handler . burly-bookmark-handler))
("Burly: left-focus-collumn"
 (url . "emacs+burly+windows:?%28%28%28min-height%20.%204%29%20%28min-width%20.%2020%29%20%28min-height-ignore%20.%203%29%20%28min-width-ignore%20.%208%29%20%28min-height-safe%20.%201%29%20%28min-width-safe%20.%204%29%20%28min-pixel-height%20.%2064%29%20%28min-pixel-width%20.%20160%29%20%28min-pixel-height-ignore%20.%2036%29%20%28min-pixel-width-ignore%20.%2052%29%20%28min-pixel-height-safe%20.%2016%29%20%28min-pixel-width-safe%20.%2032%29%29%20hc%20%28pixel-width%20.%203840%29%20%28pixel-height%20.%201032%29%20%28total-width%20.%20480%29%20%28total-height%20.%2065%29%20%28normal-height%20.%201.0%29%20%28normal-width%20.%201.0%29%20%28combination-limit%29%20%28leaf%20%28pixel-width%20.%202560%29%20%28pixel-height%20.%201032%29%20%28total-width%20.%20320%29%20%28total-height%20.%2065%29%20%28normal-height%20.%201.0%29%20%28normal-width%20.%200.6666666666666666%29%20%28parameters%20%28burly-url%20.%20%22emacs%2Bburly%2Bname%3A%2F%2F%3F%2Ascratch%2A%22%29%29%20%28buffer%20%22%2Ascratch%2A%22%20%28selected%20.%20t%29%20%28hscroll%20.%200%29%20%28fringes%205%205%20nil%20nil%29%20%28margins%20nil%29%20%28scroll-bars%20nil%200%20t%20nil%200%20t%20nil%29%20%28vscroll%20.%200%29%20%28dedicated%29%20%28point%20.%20146%29%20%28start%20.%201%29%29%29%20%28leaf%20%28last%20.%20t%29%20%28pixel-width%20.%201280%29%20%28pixel-height%20.%201032%29%20%28total-width%20.%20160%29%20%28total-height%20.%2065%29%20%28normal-height%20.%201.0%29%20%28normal-width%20.%200.3333333333333333%29%20%28parameters%20%28burly-url%20.%20%22emacs%2Bburly%2Bname%3A%2F%2F%3F%2Ascratch%2A%22%29%29%20%28buffer%20%22%2Ascratch%2A%22%20%28selected%29%20%28hscroll%20.%200%29%20%28fringes%205%205%20nil%20nil%29%20%28margins%20nil%29%20%28scroll-bars%20nil%200%20t%20nil%200%20t%20nil%29%20%28vscroll%20.%200%29%20%28dedicated%29%20%28point%20.%20146%29%20%28start%20.%201%29%29%29%29")
 (handler . burly-bookmark-handler))
("Burly: triple-collumn"
 (url . "emacs+burly+windows:?%28%28%28min-height%20.%204%29%20%28min-width%20.%2030%29%20%28min-height-ignore%20.%203%29%20%28min-width-ignore%20.%2012%29%20%28min-height-safe%20.%201%29%20%28min-width-safe%20.%206%29%20%28min-pixel-height%20.%2064%29%20%28min-pixel-width%20.%20240%29%20%28min-pixel-height-ignore%20.%2036%29%20%28min-pixel-width-ignore%20.%2078%29%20%28min-pixel-height-safe%20.%2016%29%20%28min-pixel-width-safe%20.%2048%29%29%20hc%20%28pixel-width%20.%203840%29%20%28pixel-height%20.%201032%29%20%28total-width%20.%20480%29%20%28total-height%20.%2065%29%20%28normal-height%20.%201.0%29%20%28normal-width%20.%201.0%29%20%28combination-limit%29%20%28leaf%20%28pixel-width%20.%201280%29%20%28pixel-height%20.%201032%29%20%28total-width%20.%20160%29%20%28total-height%20.%2065%29%20%28normal-height%20.%201.0%29%20%28normal-width%20.%200.3333333333333333%29%20%28parameters%20%28burly-url%20.%20%22emacs%2Bburly%2Bname%3A%2F%2F%3F%2Ascratch%2A%22%29%29%20%28buffer%20%22%2Ascratch%2A%22%20%28selected%20.%20t%29%20%28hscroll%20.%200%29%20%28fringes%205%205%20nil%20nil%29%20%28margins%20nil%29%20%28scroll-bars%20nil%200%20t%20nil%200%20t%20nil%29%20%28vscroll%20.%200%29%20%28dedicated%29%20%28point%20.%20146%29%20%28start%20.%201%29%29%29%20%28leaf%20%28pixel-width%20.%201280%29%20%28pixel-height%20.%201032%29%20%28total-width%20.%20160%29%20%28total-height%20.%2065%29%20%28normal-height%20.%201.0%29%20%28normal-width%20.%200.3333333333333333%29%20%28parameters%20%28burly-url%20.%20%22emacs%2Bburly%2Bname%3A%2F%2F%3F%2Ascratch%2A%22%29%29%20%28buffer%20%22%2Ascratch%2A%22%20%28selected%29%20%28hscroll%20.%200%29%20%28fringes%205%205%20nil%20nil%29%20%28margins%20nil%29%20%28scroll-bars%20nil%200%20t%20nil%200%20t%20nil%29%20%28vscroll%20.%200%29%20%28dedicated%29%20%28point%20.%20146%29%20%28start%20.%201%29%29%29%20%28leaf%20%28last%20.%20t%29%20%28pixel-width%20.%201280%29%20%28pixel-height%20.%201032%29%20%28total-width%20.%20160%29%20%28total-height%20.%2065%29%20%28normal-height%20.%201.0%29%20%28normal-width%20.%200.3333333333333333%29%20%28parameters%20%28burly-url%20.%20%22emacs%2Bburly%2Bname%3A%2F%2F%3F%2Ascratch%2A%22%29%29%20%28buffer%20%22%2Ascratch%2A%22%20%28selected%29%20%28hscroll%20.%200%29%20%28fringes%205%205%20nil%20nil%29%20%28margins%20nil%29%20%28scroll-bars%20nil%200%20t%20nil%200%20t%20nil%29%20%28vscroll%20.%200%29%20%28dedicated%29%20%28point%20.%20146%29%20%28start%20.%201%29%29%29%29")
 (handler . burly-bookmark-handler))
("Burly: double-collumn"
 (url . "emacs+burly+windows:?%28%28%28min-height%20.%204%29%20%28min-width%20.%2020%29%20%28min-height-ignore%20.%203%29%20%28min-width-ignore%20.%208%29%20%28min-height-safe%20.%201%29%20%28min-width-safe%20.%204%29%20%28min-pixel-height%20.%2064%29%20%28min-pixel-width%20.%20160%29%20%28min-pixel-height-ignore%20.%2036%29%20%28min-pixel-width-ignore%20.%2052%29%20%28min-pixel-height-safe%20.%2016%29%20%28min-pixel-width-safe%20.%2032%29%29%20hc%20%28pixel-width%20.%203840%29%20%28pixel-height%20.%201032%29%20%28total-width%20.%20480%29%20%28total-height%20.%2064%29%20%28normal-height%20.%201.0%29%20%28normal-width%20.%201.0%29%20%28combination-limit%29%20%28leaf%20%28pixel-width%20.%201920%29%20%28pixel-height%20.%201032%29%20%28total-width%20.%20240%29%20%28total-height%20.%2064%29%20%28normal-height%20.%201.0%29%20%28normal-width%20.%200.5%29%20%28parameters%20%28burly-url%20.%20%22emacs%2Bburly%2Bname%3A%2F%2F%3F%2Ascratch%2A%22%29%29%20%28buffer%20%22%2Ascratch%2A%22%20%28selected%20.%20t%29%20%28hscroll%20.%200%29%20%28fringes%205%205%20nil%20nil%29%20%28margins%20nil%29%20%28scroll-bars%20nil%200%20t%20nil%200%20t%20nil%29%20%28vscroll%20.%200%29%20%28dedicated%29%20%28point%20.%20146%29%20%28start%20.%201%29%29%29%20%28leaf%20%28last%20.%20t%29%20%28pixel-width%20.%201920%29%20%28pixel-height%20.%201032%29%20%28total-width%20.%20240%29%20%28total-height%20.%2064%29%20%28normal-height%20.%201.0%29%20%28normal-width%20.%200.5%29%20%28parameters%20%28burly-url%20.%20%22emacs%2Bburly%2Bname%3A%2F%2F%3F%2Ascratch%2A%22%29%29%20%28buffer%20%22%2Ascratch%2A%22%20%28selected%29%20%28hscroll%20.%200%29%20%28fringes%205%205%20nil%20nil%29%20%28margins%20nil%29%20%28scroll-bars%20nil%200%20t%20nil%200%20t%20nil%29%20%28vscroll%20.%200%29%20%28dedicated%29%20%28point%20.%20146%29%20%28start%20.%201%29%29%29%29")
 (handler . burly-bookmark-handler))
("Burly: single-collumn"
 (url . "emacs+burly+windows:?%28%28%28min-height%20.%204%29%20%28min-width%20.%2010%29%20%28min-height-ignore%20.%203%29%20%28min-width-ignore%20.%204%29%20%28min-height-safe%20.%201%29%20%28min-width-safe%20.%202%29%20%28min-pixel-height%20.%2064%29%20%28min-pixel-width%20.%2080%29%20%28min-pixel-height-ignore%20.%2036%29%20%28min-pixel-width-ignore%20.%2026%29%20%28min-pixel-height-safe%20.%2016%29%20%28min-pixel-width-safe%20.%2016%29%29%20leaf%20%28pixel-width%20.%203840%29%20%28pixel-height%20.%201032%29%20%28total-width%20.%20480%29%20%28total-height%20.%2064%29%20%28normal-height%20.%201.0%29%20%28normal-width%20.%201.0%29%20%28parameters%20%28burly-url%20.%20%22emacs%2Bburly%2Bname%3A%2F%2F%3F%2Ascratch%2A%22%29%29%20%28buffer%20%22%2Ascratch%2A%22%20%28selected%20.%20t%29%20%28hscroll%20.%200%29%20%28fringes%205%205%20nil%20nil%29%20%28margins%20nil%29%20%28scroll-bars%20nil%200%20t%20nil%200%20t%20nil%29%20%28vscroll%20.%200%29%20%28dedicated%29%20%28point%20.%20146%29%20%28start%20.%201%29%29%29")
 (handler . burly-bookmark-handler))
)
#+end_src

***** init.el
:PROPERTIES:
:header-args: :tangle ./System/Home-Manager/Home-Packages/Emacs/init.el
:END:

#+begin_src emacs-lisp
(start-process-shell-command "PolyBar StartUp" "*Messages*" "polybar thanatos")

(start-process-shell-command "volctl" "*Messages*" "volctl")

(start-process-shell-command "nm-applet" "*Messages*" "nm-applet")

(setq package-enable-at-startup nil)

(setq use-package-always-ensure t) ;Adds the require argument to all use-package statements.

(setq vc-follow-symlinks t)

(setq undo-tree-history-directory-alist '(("." . "~/.config/emacs/backup-files")))
(setq backup-directory-alist '(("." . "~/.config/emacs/backup-files")))

(setq warning-minimum-level ":error")

(server-start)

(menu-bar-mode -1)

(tool-bar-mode -1)

(scroll-bar-mode -1)

(set-fringe-mode 5)

(global-hl-line-mode 1)

(setq column-number-mode t)

(bookmark-load bookmark-default-file t)

(add-to-list 'auto-mode-alist '("\\.md\\'" . text-mode))

(defvar Tn/default-font-size 120)

(set-face-attribute 'default nil
                    :font "Iosevka"
                    :weight 'regular
                    :height 180)

(set-face-attribute 'fixed-pitch nil
                    :font "Iosevka"
                    :weight 'semibold
                    :height 180)

(set-face-attribute 'variable-pitch nil
                    :font "FiraGo"
                    :weight 'regular
                    :height 180)

(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))

(global-display-line-numbers-mode t)

(dolist (mode '(pdf-view-mode-hook
                term-mode-hook
                shell-mode-hook
                eww-mode-hook
                text-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

(setq calendar-latitude 42.33
      calendar-longitude -83.04
      calendar-location-name "Detroit,MI"
      user-login-name "xin"
      user-mail-address "xin@ironshark.org")

(global-visual-line-mode t)

(setq-default fill-column 80)

(setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))

(global-set-key (kbd "<escape>")  'keyboard-escape-quit)

(defadvice keyboard-escape-quit (around my-keyboard-escape-quit activate)
  (let (orig-one-window-p)
    (fset 'orig-one-window-p (symbol-function 'one-window-p))
    (fset 'one-window-p (lambda (&optional nomini all-frames) t))
    (unwind-protect
        ad-do-it
      (fset 'one-window-p (symbol-function 'orig-one-window-p)))))

(global-set-key (kbd "C-x c")  'centered-cursor-mode)

(global-set-key (kbd "C-S-v") 'clipboard-yank)
(global-set-key (kbd "C-S-c") 'clipboard-kill-ring-save)
(global-set-key (kbd "C-S-x") 'clipboard-kill-region)

(add-hook 'before-save-hook #'whitespace-cleanup)
(setq-default sentence-end-double-space nil)

(global-auto-revert-mode 1)

(fset 'yes-or-no-p 'y-or-n-p)

(setq visible-bell t
      ring-bell-function 'ignore)

(show-paren-mode t)

(setq-default indent-tabs-mode nil)

(use-package burly)

(defun Tn/exwm-update-title ()
  (pcase exwm-class-name
    ("firefox" (exwm-workspace-rename-buffer (format "Firefox: %s" exwm-title))
     (setq mode-line-format nil))
    ("obsidian" (exwm-input-release-keyboard)
     (setq mode-line-format nil))
    ("Alacritty" (exwm-input-release-keyboard)
     (setq mode-line-format nil))
    ("krita" (exwm-input-release-keyboard)
     (setq mode-line-format nil))
    ("Blender" (exwm-input-release-keyboard)
     (setq mode-line-format nil))
    ("Gimp" (exwm-input-release-keyboard)
     (setq mode-line-format nil))
    ("discord" (exwm-input-release-keyboard)
     (setq mode-line-format nil))
    ("Bitwarden" (exwm-input-release-keyboard)
     (setq mode-line-format nil))
    ("ffxiv_dx11.exe" (exwm-input-release-keyboard)
     (setq mode-line-format nil))
    ("XIVLauncher.Core" (exwm-input-release-keyboard)
     (setq mode-line-format nil))))

(defun Tn/dmenu-launch ()
  (interactive)
  (execute-extended-command "" "dmenu"))

(defun Tn/lock-screen ()
  (interactive)
  (shell-command "sudo slock"))

(defun Tn/audio-up ()
  (interactive)
  (shell-command "pulseaudio-ctl up"))

(defun Tn/audio-down ()
  (interactive)
  (shell-command "pulseaudio-ctl down"))

(defun Tn/audio-mute ()
  (interactive)
  (shell-command "pulseaudio-ctl mute"))

(defun Tn/single-collumn-template ()
  (interactive)
  (bookmark-jump "Burly: single-collumn"))

(defun Tn/double-collumn-template ()
  (interactive)
  (bookmark-jump "Burly: double-collumn"))

(defun Tn/triple-collumn-template ()
  (interactive)
  (bookmark-jump "Burly: triple-collumn"))

(defun Tn/left-focus-collumn-template ()
  (interactive)
  (bookmark-jump "Burly: left-focus-collumn"))

(defun Tn/right-focus-collumn-template ()
  (interactive)
  (bookmark-jump "Burly: right-focus-collumn"))

(defun Tn/center-focus-collumn-template ()
  (interactive)
  (bookmark-jump "Burly: center-focus-collumn"))

(defun Tn/brightness-up ()
  (interactive)
  (shell-command "sudo light -A 5"))

(defun Tn/brightness-down ()
  (interactive)
  (shell-command "sudo light -U 5"))

(use-package exwm
  :config

(require 'exwm-systemtray)
(exwm-systemtray-enable)

(setq exwm-workspace-number 9)

(setq exwm-layout-show-all-buffers t)

;(setq exwm-workspace-show-all-buffers t)

(setq exwm-input-prefix-keys
  '(?\C-x
    ?\C-u
    ?\C-h
    ?\M-x
    ?\M-`
    ?\M-&
    ?\M-:
    ?\C-c
    ?\C-\M-j  ;; Buffer list
    ?\C-\     ;; Ctrl+Space
    ))

(define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

(setq exwm-input-global-keys
      `(

([?\s-r] . exwm-reset)

([?\s-c] . org-capture)

([?\s-a] . org-agenda)

([?\s-\M-a] . org-agenda-exit)

([?\s-`] . (lambda (command)
             (interactive (list (read-shell-command "$ ")))
             (start-process-shell-command command nil command)))

([s-left] . windmove-left)
([s-right] . windmove-right)
([s-up] . windmove-up)
([s-down] . windmove-down)

([?\s-\ ] . helm-buffers-list)
([s-backspace] . ibuffer)
([?\s-b] . switch-to-buffer)
([\C-s-right] . next-buffer)
([\C-s-left] . previous-buffer)

([?\s-x] . Tn/dmenu-launch)
([?\s-f] . helm-find-files)
([?\s-q] . Tn/lock-screen)

([?\s-p] . helm-projectile)

([?\s-.] . Tn/audio-up)
([?\s-,] . Tn/audio-down)
([?\s-/] . Tn/audio-mute)

([?\s->] . Tn/brightness-up)
([?\s-<] . Tn/brightness-down)

([?\s-\C-1] . Tn/single-collumn-template)
([?\s-\C-2] . Tn/double-collumn-template)
([?\s-\C-3] . Tn/triple-collumn-template)
([?\s-\C-4] . Tn/left-focus-collumn-template)
([?\s-\C-4] . Tn/right-focus-collumn-template)
([?\s-\C-4] . Tn/center-focus-collumn-template)

([?\s-=] . balance-windows)
([?\s-D] . kill-buffer-and-widow)
([?\s-d] . kill-this-buffer)
([?\s-\M-1] . delete-other-windows)
([?\s-\M-2] . split-window-below)
([?\s-\M-3] . split-window-right)
([?\s-0] . delete-window)
([?\s-|] . enlarge-window)
([?\s-}] . enlarge-window-horizontally)
([?\s-{] . shrink-window-horizontally)

,@(mapcar (lambda (i)
            `(,(kbd (format "s-%d"  i)) .
              (lambda ()
                (interactive)
                (exwm-workspace-switch-create ,(- i 1)))))
          (number-sequence 1 9))

))

(unless (get 'exwm-input-simulation-keys 'saved-value)
  (setq exwm-input-simulation-keys
        '(([?\C-b] . [left])
          ([?\C-f] . [right])
          ([?\C-p] . [up])
          ([?\C-n] . [down])
          ([?\C-a] . [home])
          ([?\C-e] . [end])
          ([?\M-v] . [prior])
          ([?\C-v] . [next])
          ([?\C-d] . [delete])
          ([?\C-k] . [S-end delete]))))

(add-hook 'exwm-update-class-hook
          (lambda ()
          (exwm-workspace-rename-buffer exwm-class-name)))

(add-hook 'exwm-update-title-hook #'Tn/exwm-update-title)

(exwm-enable))

(use-package helm)
(setq helm-mode-fuzzy-match t)
(helm-mode 1)

(setq _helm-exciting-buffer-regexp-list
      (quote
       ("\\*magit:"
        )))

(setq helm-boring-buffer-regexp-list
      (quote
       (  "\\Minibuf.+\\*"
               "\\` "
               "\\*.+\\*"
                  )))

;(global-set-key (kbd "M-x") 'helm-M-x)

(global-set-key (kbd "C-x C-f") 'helm-find-files)

(define-key helm-find-files-map (kbd "<SPC>") 'helm-find-files-up-one-level)

(use-package helm-projectile)

(custom-set-variables
 '(git-gutter:modified-sign "~")
 '(org-export-backends '(ascii html icalendar latex md odt freemind)))

(use-package emojify)

(use-package all-the-icons
  :init
  (unless (member "all-the-icons" (font-family-list))
    (all-the-icons-install-fonts t)))

(defvar ligatures-fixed '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                     ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                     "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                     "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                     "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                     "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                     "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                     "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                     ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                     "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                     "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                     "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                     "\\\\" "://"))

(use-package ligature
  :config
  (ligature-set-ligatures 't ligatures-fixed)
  (global-ligature-mode t))

(use-package centered-cursor-mode)

(use-package rainbow-delimiters
  :init (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

(use-package smartparens
  :config
  (setq sp-show-pair-from-inside nil)
  (require 'smartparens-config)
  :diminish smartparens-mode)

(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))

(use-package doom-themes
  :init (load-theme 'doom-city-lights t))

(use-package evil
  :init
  (setq evil-want-integration t
       evil-want-keybinding nil
       evil-want-C-u-scroll t
       evil-want-C-i-jump nil
       evil-respect-visual-line-mode t
       evil-undo-system 'undo-tree)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
  (define-key evil-normal-state-map (kbd "<SPC>") 'helm-occur)
  (define-key evil-normal-state-map (kbd "/") 'helm-regexp)
  (evil-ex-define-cmd "q" 'kill-this-buffer) ;Evil nomral mode ':q' kills active buffer
  (evil-ex-define-cmd "Q" 'kill-buffer-and-window)) ; Evil normal mode ':Q' kills buffer and window

(use-package evil-snipe
  :after evil
  :config
  (evil-snipe-mode +1)
  (evil-snipe-override-mode +1))

(add-hook 'magit-mode-hook 'turn-off-evil-snipe-override-mode)
(evil-define-key 'visual evil-snipe-local-mode-map "z" 'evil-snipe-s)
(evil-define-key 'visual evil-snipe-local-mode-map "Z" 'evil-snipe-S)

(evil-define-key '(normal motion) evil-snipe-local-mode-map
  "s" 'evil-snipe-j
  "t" 'evil-snipe-J)

(evil-define-key 'motion evil-snipe-override-local-mode-map
  "S" 'evil-snipe-t
  "T" 'evil-snipe-T)

(use-package evil-easymotion
  :after evil evil-snipe
  :config
  (evilem-default-keybindings "RET")
  (define-key evilem-map "n" #'evilem-motion-next-line)
  (define-key evilem-map "e" #'evilem-motion-previous-line)
  (define-key evilem-map "N" #'evil-scroll-page-down)
  (define-key evilem-map "E" #'evil-scroll-page-up)
  (define-key evilem-map "T" #'evil-scroll-line-to-center)
  (define-key evilem-map "S" #'centered-cursor-mode)
  (define-key evilem-map "x" #'eval-region)
  (define-key evilem-map "t" #'evil-snipe-s)
  (define-key evilem-map "s" #'evil-snipe-S))

(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))

(defun  Tn/evil-collection-colemak (_mode mode-keymaps &rest _rest)
  (evil-collection-translate-key 'normal mode-keymaps
    "m" "h"
    "n" "j"
    "e" "k"
    "i" "l"
    "h" "m"
    "j" "n"
    "k" "e"
    "l" "i"))

;; called after evil-collection makes its keybindings
(add-hook 'evil-collection-setup-hook #'Tn/evil-collection-colemak)

(use-package evil-colemak-basics
  :after evil evil-snipe
  :diminish global-evil-colemak-basis-mode
  :init
  (setq evil-colemak-basics-layout-mod 'mod-dh)
  (setq evil-colemak-basics-char-jump-commands 'evil-snipe)
  :config
  (global-evil-colemak-basics-mode))

(setq ibuffer-formats
      '((mark modified read-only " "
              (name 40 40 :left :elide) ; change: 30s were originally 18s
              " "
              (size 9 -1 :right)
              " "
              (mode 9 9 :left :elide)
              " " filename-and-process)
        (mark " "
              (name 16 -1)
              " " filename)))

(with-eval-after-load 'ibuf-ext
  ;; Create a case-insensitive ibuffer sort command.  Derived from
  ;; `ibuffer-do-sort-by-alphabetic' which is defined in ibuf-ext.el
  ;; by (define-ibuffer-sorter alphabetic ...).
  (define-ibuffer-sorter alphabetic-ignore-case
    "Sort the buffers by their names, ignoring case."
    (:description "buffer name")
    (string-collate-lessp
     (buffer-name (car a))
     (buffer-name (car b))
     nil t))
  ;; Assign the new command to the 'Name' header keymap.
  (define-key ibuffer-name-header-map [(mouse-1)]
    'ibuffer-do-sort-by-alphabetic-ignore-case)
  (put 'ibuffer-make-column-name 'header-mouse-map
       ibuffer-name-header-map))

(setq-default ibuffer-default-sorting-mode 'alphabetic-ignore-case)

(add-hook 'ibuffer-mode-hook #'ibuffer-auto-mode)

(setq ibuffer-expert t)
(remove-hook 'kill-buffer-query-functions 'process-kill-buffer-query-function)

(use-package helpful
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :bind
  ([remap describe-command] . helpful-command)
  ([remap describe-key] . helpful-key))

(use-package which-key
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 1))

(use-package undo-tree)
(global-undo-tree-mode 1)

(use-package dmenu)

(dolist (hook '(text-mode-hook))
  (add-hook hook (lambda ()
                   (flyspell-mode 1))))

(add-hook 'prog-mode-hook #'flyspell-prog-mode)

(add-hook 'text-mode-hook #'flyspell-mode)

(use-package magit)

(add-hook 'with-editor-mode-hook 'evil-insert-state)

(use-package git-gutter)

(custom-set-variables
 '(git-gutter:modified-sign "~")) ;; two space

(set-face-foreground 'git-gutter:modified "deep sky blue") ;; background color
(set-face-foreground 'git-gutter:added "green")
(set-face-foreground 'git-gutter:deleted "red")

(global-set-key (kbd "C-c G") 'git-gutter-mode)

(use-package projectile
  :init
  (projectile-mode +1))

;; (setq  projectile-project-search-path '("~/Projects" "~/Grimoire"))

(use-package ag)

(use-package rg)

(global-set-key (kbd "C-s") #'rg-menu)

(use-package nix-mode
  :mode "\\.nix\\'")

(use-package org-bullets
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

(use-package org-appear)
(add-hook 'org-mode-hook 'org-appear-mode)

(setq org-appear-trigger 'manual)
(add-hook 'org-mode-hook (lambda ()
                           (add-hook 'evil-insert-state-entry-hook
                                     #'org-appear-manual-start
                                     nil
                                     t)
                           (add-hook 'evil-insert-state-exit-hook
                                     #'org-appear-manual-stop
                                     nil
                                     t)))

(defun Tn/org-mode-setup ()
  (org-indent-mode 1)
  (variable-pitch-mode 1)
  (auto-fill-mode 0)
  (visual-line-mode 1)
  (display-line-numbers-mode 0)
  (setq evil-auto-indent nil
        org-src-preserve-indentation nil
        org-edit-src-content-indentation 0))

(defun Tn/org-font-setup ()

(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

(dolist (face '((org-level-1 . 1.1)
                (org-level-2 . 1.1)
                (org-level-3 . 1.1)
                (org-level-4 . 1.1)
                (org-level-5 . 1.1)
                (org-level-6 . 1.1)
                (org-level-7 . 1.1)
                (org-level-8 . 1.1)))
  (set-face-attribute (car face) nil :font "FiraGO" :weight 'regular :height (cdr face)))

(set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
(set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
(set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
(set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
(set-face-attribute 'line-number nil :inherit 'fixed-pitch)
(set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch)

)

(defun Tn/org-find-time-file-property (property &optional anywhere)
  "Return the position of the time file PROPERTY if it exists.
When ANYWHERE is non-nil, search beyond the preamble."
  (save-excursion
    (goto-char (point-min))
    (let ((first-heading
           (save-excursion
             (re-search-forward org-outline-regexp-bol nil t))))
      (when (re-search-forward (format "^#\\+%s:" property)
                               (if anywhere nil first-heading)
                               t)
        (point)))))

(defun Tn/org-has-time-file-property-p (property &optional anywhere)
  "Return the position of time file PROPERTY if it is defined.
As a special case, return -1 if the time file PROPERTY exists but
is not defined."
  (when-let ((pos (Tn/org-find-time-file-property property anywhere)))
    (save-excursion
      (goto-char pos)
      (if (and (looking-at-p " ")
               (progn (forward-char)
                      (org-at-timestamp-p 'lax)))
          pos
        -1))))

(defun Tn/org-set-time-file-property (property &optional anywhere pos)
  "Set the time file PROPERTY in the preamble.
When ANYWHERE is non-nil, search beyond the preamble.
If the position of the file PROPERTY has already been computed,
it can be passed in POS."
  (when-let ((pos (or pos
                      (Tn/org-find-time-file-property property))))
    (save-excursion
      (goto-char pos)
      (if (looking-at-p " ")
          (forward-char)
        (insert " "))
      (delete-region (point) (line-end-position))
      (let* ((now (format-time-string "[%Y-%m-%d %a %H:%M]")))
        (insert now)))))

(defun Tn/org-set-last-modified ()
  "Update the LAST_MODIFIED file property in the preamble."
  (when (derived-mode-p 'org-mode)
    (Tn/org-set-time-file-property "LAST_MODIFIED")))

;; (setq org-capture-templates
;;   '(("j" "Journal Entry"
;;          entry (file+datetree "~/Grimoire/temp-journal.org")
;;          "* %<%H:%M> %?"
;;          :empty-lines 1)
;;     ("f" "Food Log"
;;          entry (file+datetree "~/Grimoire/temp-food-log.org")
;;          "* %<%H:%M> %?"
;;          :empty-lines 1)))

(add-hook 'org-capture-mode-hook 'evil-insert-state)

;; (setq org-agenda-files (append
                        ;; (directory-files-recursively "~/Grimoire/" "\\.org$")
                        ;; (directory-files-recursively "~/Projects/" "\\.org$")
                        ;; ))

;; (define-key org-agenda-mode-map "j" 'evil-next-line)
;; (define-key org-agenda-mode-map "k" 'evil-previous-line)

(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "cyan" :weight bold)
              ("NEXT" :foreground "SeaGreen1" :weight bold)
              ("DONE" :foreground "dim gray" :weight bold)
              ("WAITING" :foreground "deep pink" :weight bold)
              ("HOLD" :foreground "blue violet" :weight bold)
              ("CANCELLED" :foreground "dark red" :weight bold)
              ("MEETING" :foreground "gainboro" :weight bold)
              ("PHONE" :foreground "gainboro" :weight bold))))

(add-to-list 'org-structure-template-alist
             '("en" . "src nix"))

(defun Tn/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package org

:hook (org-mode . Tn/org-mode-setup)
      (org-mode . Tn/org-font-setup)
      (after-save . org-babel-tangle)
      (before-save . Tn/org-set-last-modified)

:config
(setq org-ellipsis " ▾"
      org-hide-emphasis-markers t
      org-src-fontify-natively t
      org-fontify-quote-and-verse-blocks t
      org-src-tab-acts-natively t
      org-edit-src-content-indentation 2
      org-hide-block-startup nil
      org-src-preserve-indentation nil
      org-startup-folded t
      org-startup-with-inline-images t
      org-cycle-separator-lines 2
      org-confirm-babel-evaluate nil
      org-capture-bookmark nil)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (lisp . t)
   (latex . t)
   (scheme . t)))

(push '("conf-unix" . conf-unix) org-src-lang-modes)

)

(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))

(require 'org-agenda)

(define-key org-agenda-mode-map (kbd "n") 'org-agenda-next-line)
(define-key org-agenda-mode-map (kbd "e") 'org-agenda-previous-line)

(define-key org-agenda-mode-map (kbd "n") 'org-agenda-goto-date)

(define-key org-agenda-mode-map (kbd "p") 'org-agenda-capture)

(define-key org-agenda-mode-map (kbd "<SPC>") 'helm-occur)

(define-key org-agenda-mode-map (kbd "s-A") 'org-agenda-exit)

(use-package ox-hugo
  :after ox)

(use-package visual-fill-column
  :hook (org-mode . Tn/org-mode-visual-fill))

(use-package aggressive-indent)
(global-aggressive-indent-mode 1)
#+end_src

***** emacs.nix
:PROPERTIES:
:header-args: :tangle ./System/Home-Manager/Home-Packages/Emacs/emacs.nix
:END:

#+begin_src nix
{ inputs, outputs, lib, config, pkgs, ... }: {

  home.file.emacs-init = {
    source = ./init.el;
    target = ".config/emacs/init.el";
  };

  home.file.emacs-bookmarks = {
    source = config.lib.file.mkOutOfStoreSymlink ./bookmarks;
    target = ".config/emacs/bookmarks";
  };
}
#+end_src

***** exwm.nix
:PROPERTIES:
:header-args: :tangle ./System/Home-Manager/Home-Packages/Emacs/exwm.nix
:END:

#+begin_src nix
{ inputs, outputs, lib, config, pkgs, ... }: {

programs.emacs = {
  enable = true;
  package = (pkgs.emacsWithPackagesFromUsePackage {
    config = ./init.el;
    defaultInitFile = true;
    package = pkgs.emacs-unstable;
    alwaysEnsure = true;
    extraEmacsPackages = epkgs: [
       # Anything needed but not specified in init.el
      ];
    });
  };
}
#+end_src

*** Home-Scripts
