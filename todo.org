* Tn-Final Remainder
** TODO Configure Emacs Core
*** TODO Create (M-x programName) functions for all frequently used programs
**** TODO (M-x shell) to call Alacritty
**** TODO revert buffer ~(C-x x g)~ with out confirmation prompt
**** TODO Buffer Mangement
***** TODO Emacs-Winner mode for faster layout management
***** TODO Emacs-Perspectives for layout management
***** TODO Consider Dynamic Tiling package
***** TODO Research xmonad style video fullscreening
*** TODO Follow up about Helm settings
- https://tuhdo.github.io/helm-intro.html
- [[https://github.com/thierryvolpiatto/emacs-config/blob/main/init-helm.el][Example Helm Config]]
- [[https://tuhdo.github.io/helm-intro.html][A Package in a League of it own]]
**** TODO Test if HelmPosframe can work
- https://melpa.org/#/helm-posframe
- https://www.reddit.com/r/emacs/comments/df7lpc/is_posframe_what_i_am_looking_for/
- https://www.reddit.com/r/emacs/comments/jj269n/display_helm_frames_in_the_center_of_emacs/
  - This one in particular seemed promising but doesn't work correctly. Good of an e-lisp project.
**** TODO [[https://melpa.org/#/helm-company][Helm-Company]]
**** TODO [[https://melpa.org/#/flyspell-correct-helm][Fly-Spell Helm]]
*** TODO Configure default starting message
#+begin_src emacs-lisp
(setq initial-major-mode 'org-mode)
#+end_src
*** TODO Create a custom function to edit sudo files with tramp.
- Try to create a shell command =seo= to do the same or second function to reopen current file as root
- [[https://emacs.stackexchange.com/questions/52/edit-file-with-super-user-rights]]
*** TODO Use ~(C-c C-z)~ to add bullet notes to a heading
**** TODO add evil-insert-hook to capture hook
*** TODO use refile-copy to timestamp and archive all completed tasks in a single chronological
*** TODO Consider adding emacs save hook to evil normal mode hook.
- Goal of saving every time i enter normal mode
- Needs better working knowledge of undo tree
  - https://www.emacswiki.org/emacs/UndoTree
- Would work best with a rolling back up save system
*** TODO Consider additional Packages
**** TODO Org-wild-notifier
**** TODO Gnu go
**** TODO gnu cash
- if compatable with hledger
**** TODO hledger
*** TODO Change evil ~s~ and ~r~ so they jump to the character not before it
*** TODO Follow Up on ~abbrev mode~
*** TODO Follow up on using attachments with org files
#+begin_src emacs-lisp
(setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
#+end_src
**** TODO Figure out how to configure default directory for org attachments
- allows moving tasks without breaking links
*** TODO Move org tangle hook to before save
*** TODO create function to split window Vertically and Balance all windows in single button
*** TODO Create function to close current buffer and hide window, and balance remaining window.
*** TODO Prevent invisible eddits
#+begin_src emacs-lisp
(setq org-catch-invisible-edits 'error)
#+end_src

*** TODO Append empty line to file
#+begin_src emacs-lisp
(setq require-final-newline t)
#+end_src
*** TODO Refine Evil Jumps
**** TODO Easymotion
**** TODO [[https://github.com/otavioschwanck/harpoon.el][Harpoon]]
*** TODO Test addition packages
**** TODO [[https://github.com/bbatsov/crux][crux]]
**** TODO [[https://github.com/nverno/llvm-mode][LLVM IR Mode]]
**** TODO [[https://melpa.org/#/paredit][paredit]]
**** TODO [[https://melpa.org/#/company][company]]
** TODO Configure Org Core
- [[https://hugocisneros.com/org-config/][Example Config]]
*** TODO Test Additional Packages
**** TODO [[https://melpa.org/#/helm-org][Helm-Org]]
*** TODO add empty line and point start position to org code block templates
*** TODO Create Note taking workflow
- [[https://jonhanabennett.github.io/blog/2019/05/29/writing-academic-papers-with-org-mode/][Writing Academic Papers in Org Mode]]
- [[https://karinks.com/software/latex-input-for-impatient-scholars/][Latex for Impatient Scolars]]
- [[https://casl.dev/post/lecture-notes-1/][Latex + Vim Notes]]
**** TODO Singllarge notes file
- Integrate witRoam. By either the main file being indexed, or the top level headlines being Indexed.
**** TODO Insig based / zettles
*** TODO Create Knowledge Management Workflow
- https://zk.zeel.page/examples
- https://www.mtalnodes.com/taking-raw-notes-is-useless
- https://whhoncom/posts/para-org-mode/
- https://www.bldingasecondbrain.com/
- [[https://wwweddit.com/r/emacs/comments/10hm92r/emacs_and_knowledge_management_for_scientists/][Knowledge management for scientists]]
- [[https://jetokuan.github.io/org-roam-guide/][Taking notes with org roam]]
- [[https://tony-zorman.com/posts/my-phd-workflow.html][PhD Workflow]]
- [[https://blog.jethro.dev/posts/how_to_take_smart_notes_org/][How to take smart notes with Org Mode]]
- [[https://rgoswami.me/posts/org-note-workflow/][Org Mode Note Workflow]]
**** TODO Captu Information from Web
- https://githucom/abo-abo/orca
**** TODO PDF Vwer
- [[https://gitb.com/vedang/pdf-tools]]
- https://rgoswi.me/posts/org-note-workflow/#org-noter
- https://alber.am/2020-04-11-pdf-tools-as-default-pdf-viewer.html
**** TODO Integte wikipedia links using EWW and Org
*** TODO Create Math Workflow
**** TODO Doing Math with Org-mode
***** TODO Tables
***** TODO Elisp / Haskell (?) Code blocks
- https://wiki.haskell.org/Haskell_and_mathematics
***** TODO LaTeX Engine
- https://www.latex-project.org/help/documentation/
- https://texdoc.org/serve/latex2e.pdf/0
**** TODO GNU calc and plot integration
**** TODO Latex inline code Support
**** TODO Export org docs to pdf
*** TODO Create Programming Workflow
**** TODO Figure Out what TreeSitter is
**** TODO Figure Out What LSP is
- https://emacs-lsp.github.io/lsp-mode/tutorials/how-to-turn-off/
- https://taingram.org/blog/emacs-lsp-ide.html
**** TODO FIgure Out what DAP mode is]
    - https://github.com/emacs-lsp/dap-mode
**** TODO Including Magit Workflow
*** TODO Create Task Management Workflow
- [[https://redgreenrepeat.com/2019/10/04/checklists-in-org-mode/][Checklists in Org-Mode]]
- [[https://d12frosted.io/posts/2021-01-16-task-management-with-roam-vol5.html][Task Management with Org Roam]]
- [[https://writequit.org/denver-emacs/presentations/2017-04-11-time-clocking-with-org.html][Clocking Time With Org-Mode]]
- [[https://melpa.org/#/org-pomodoro][Work Cycling with Org Pomodoro]]
*** TODO Change Org Todo heading and colors
#+begin_src emacs-lisp
 (setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "cyan" :weight bold)
              ("NEXT" :foreground "SeaGreen1" :weight bold)
              ("DONE" :foreground "dim gray" :weight bold)
              ("WAITING" :foreground "deep pink" :weight bold)
              ("HOLD" :foreground "blue violet" :weight bold)
              ("CANCELLED" :foreground "dark red" :weight bold)
              ("MEETING" :foreground "gainboro" :weight bold)
              ("PHONE" :foreground "gainboro" :weight bold))))
#+end_src
**** TODO add evil-insert hook to state based captures
*** TODO Auto add tags based on todo state
#+begin_src emacs-lisp
(setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("HOLD" ("WAITING") ("HOLD" . t))
              (done ("WAITING") ("HOLD"))
              ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
              ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
              ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
#+end_src
*** TODO Toggle through all todo headings
#+begin_src emacs-lisp
(setq org-use-fast-todo-selection t)
(setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+end_src
*** TODO Prevent Projects from being marked done while incomplete
#+begin_src emacs-lisp
(setq org-enforce-todo-dependencies 1)
#+end_src
**** TODO Over ride this behavior on a specific heading with
#+begin_src emacs-lisp
  :PROPERTIES:
  :NOBLOCKING: t
  :END:
#+end_src
**** TODO Enforces Dependencies to be completed in order
#+begin_src emacs-lisp
  :PROPERTIES:
  :ORDERED: t
  :END:
#+end_src
*** TODO Create Tag Groups and hotkeys
#+begin_src emacs-lisp
; Tags with fast selection keys
(setq org-tag-alist (quote ((:startgroup)
                            ("@errand" . ?e)
                            ("@office" . ?o)
                            ("@home" . ?H)
                            ("@farm" . ?f)
                            (:endgroup)
                            ("WAITING" . ?w)
                            ("HOLD" . ?h)
                            ("PERSONAL" . ?P)
                            ("WORK" . ?W)
                            ("FARM" . ?F)
                            ("ORG" . ?O)
                            ("NORANG" . ?N)
                            ("crypt" . ?E)
                            ("NOTE" . ?n)
                            ("CANCELLED" . ?c)
                            ("FLAGGED" . ??))))

; Allow setting single tags without the menu
(setq org-fast-tag-selection-single-key (quote expert))

; For tag searches ignore tasks with scheduled and deadline dates
(setq org-agenda-tags-todo-honor-ignore-options t)
#+end_src
**** NEXT Sort through and create tags that are useful to me.
- Tags could include, people, places, activities, ect. They are used for Context.
*** TODO Hide Blank Lines between folded headings
#+begin_src emacs-lisp
(setq org-cycle-separator-lines 0)
(setq org-blank-before-new-entry (quote ((heading)
                                         (plain-list-item . auto))))
#+end_src
*** TODO [[https://emacs.stackexchange.com/questions/13820/inline-verbatim-and-code-with-quotes-in-org-mode][Consider adding to inline highlight block REGX]]
*** TODO Refilling
#+begin_src emacs-lisp
; Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))

; Use full outline paths for refile targets - we file directly with IDO
(setq org-refile-use-outline-path t)

; Targets complete directly with IDO
(setq org-outline-path-complete-in-steps nil)

; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))

; Use the current window for indirect buffer display
(setq org-indirect-buffer-display 'current-window)

;;;; Refile settings
; Exclude DONE state tasks from refile targets
(defun Tn/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets"
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))

(setq org-refile-target-verify-function 'Tn/verify-refile-target)
#+end_src
**** NEXT Create evil normal mode map for org task
***** NEXT Copy and Refile
****** NEXT Confirm wether state changes are shared across all copies of a heading
******* NEXT If not, create tag to exclude non current daily node todos from agenda
- I think I already have something done for this wich uses tags to mark roam node so be included. So I should only need to set something up to remove it form non active node.
***** NEXT Confirm what ~org-indirect-buffer-display~ does.
*** TODO Change Starting Day of Org agenda Weekly View
#+begin_src emacs-lisp
(setq org-agenda-start-on-weekday nil)
#+end_src
*** TODO Clean up empty Clock Drawers
#+begin_src emacs-lisp
;; Remove empty LOGBOOK drawers on clock out
(defun Tn/remove-empty-drawer-on-clock-out ()
  (interactive)
  (save-excursion
    (beginning-of-line 0)
    (org-remove-empty-drawer-at "LOGBOOK" (point))))

(add-hook 'org-clock-out-hook 'Tn/remove-empty-drawer-on-clock-out 'append)
#+end_src
*** TODO Emacs Diary
- Use the diary file to track recurring events that are permanent and fixed.
  - Holidays
  - Birthdays
  - Paydays
  - ect
*** TODO Org-Super Agenda
**** TODO Follow up on this once I have more experience with agenda
- https://github.com/alphapapa/org-super-agenda
*** TODO Use emacs dairy long term recurring tasks?
*** TODO Limit default agenda display to today
#+begin_src emacs-lisp
(setq org-agenda-span 'day)
#+end_src
*** TODO Org capture settings
#+begin_src emacs-lisp
(setq org-directory "~/Grimoire")
(setq org-default-notes-file "~/git/org/refile.org")

;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
(setq org-capture-templates
      (quote (("t" "todo" entry (file "~/git/org/refile.org")
               "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
              ("r" "respond" entry (file "~/git/org/refile.org")
               "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
              ("n" "note" entry (file "~/git/org/refile.org")
               "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
              ("j" "Journal" entry (file+datetree "~/git/org/diary.org")
               "* %?\n%U\n" :clock-in t :clock-resume t)
              ("w" "org-protocol" entry (file "~/git/org/refile.org")
               "* TODO Review %c\n%U\n" :immediate-finish t)
              ("m" "Meeting" entry (file "~/git/org/refile.org")
               "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
              ("p" "Phone call" entry (file "~/git/org/refile.org")
               "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
              ("h" "Habit" entry (file "~/git/org/refile.org")
               "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))
#+end_src
**** NEXT Decide if org-file is needed
**** NEXT sort through capture templates to customize for my use
**** NEXT Integrate current eating capture templates with this
***** NEXT Possibly create a better template including tables for macros
*** TODO configure org-checklist to reset sub-tasks when parents are marked done
*** TODO Exporting
#+begin_src emacs-lisp
(setq org-alphabetical-lists t)

;; Explicitly load required exporters
(require 'ox-latex)
#+end_src
*** TODO Enable Modules
#+begin_src emacs-lisp
; Enable habit tracking (and a bunch of other modules)
(setq org-modules (quote (org-bbdb
                          org-bibtex
                          org-crypt
                          org-gnus
                          org-id
                          org-info
                          org-jsinfo
                          org-habit
                          org-inlinetask
                          org-irc
                          org-mew
                          org-mhe
                          org-protocol
                          org-rmail
                          org-vm
                          org-wl
                          org-w3m)))
#+end_src
**** NEXT Sort modules to find useful ones
*** TODO Org Babel Export
#+begin_src emacs-list
(setq org-ditaa-jar-path "~/git/org-mode/contrib/scripts/ditaa.jar")
(setq org-plantuml-jar-path "~/java/plantuml.jar")

(add-hook 'org-babel-after-execute-hook 'bh/display-inline-images 'append)

; Make babel results blocks lowercase
(setq org-babel-results-keyword "results")

(defun bh/display-inline-images ()
  (condition-case nil
      (org-display-inline-images)
    (error nil)))

(org-babel-do-load-languages
 (quote org-babel-load-languages)
 (quote ((emacs-lisp . t)
         (dot . t)
         (ditaa . t)
         (R . t)
         (python . t)
         (ruby . t)
         (gnuplot . t)
         (clojure . t)
         (sh . t)
         (ledger . t)
         (org . t)
         (plantuml . t)
         (latex . t))))

; Do not prompt to confirm evaluation
; This may be dangerous - make sure you understand the consequences
; of setting this -- see the docstring for details
(setq org-confirm-babel-evaluate nil)

; Use fundamental mode when editing plantuml blocks with C-c '
(add-to-list 'org-src-lang-modes (quote ("plantuml" . fundamental)))
#+end_src
**** NEXT Update paths
**** NEXT Update Namespaces
**** NEXT Install system packages
***** NEXT graphviz
- [[https://www.graphviz.org/docs/layouts/][Graphviz Manual]]
***** NEXT PlantUML
*** TODO Configure Org Protocol with firefox
#+begin_src emacs-lisp
(require 'org-protocol)

(setq org-return-follows-link t)
#+end_src
*** TODO Figure out how to integrate with phone
**** TODO Figure out if this is needed.
#+begin_src emacs-lisp
;; Don't enable this because it breaks access to emacs from my Android phone
(setq org-startup-with-inline-images nil)
#+end_src
**** TODO Orgzly to access todos from phone
*** TODO Show notes in the order they are taken
#+begin_src emacs-lisp
(setq org-reverse-note-order nil)
#+end_src
*** TODO Add Support for images in org-mode
- https://emacs.stackexchange.com/questions/42281/org-mode-is-it-possible-to-display-online-images
- https://github.com/abo-abo/org-download
- https://org-roam.discourse.group/t/is-there-a-solution-for-images-organization-in-org-roam/925
** TODO Configure Org-Agenda
*** TODO Agenda Displays
#+begin_src emacs-lisp
;; Do not dim blocked tasks
(setq org-agenda-dim-blocked-tasks nil)

;; Compact the block agenda view
(setq org-agenda-compact-blocks t)

;; Custom agenda command definitions
(setq org-agenda-custom-commands
      (quote (("N" "Notes" tags "NOTE"
               ((org-agenda-overriding-header "Notes")
                (org-tags-match-list-sublevels t)))
              ("h" "Habits" tags-todo "STYLE=\"habit\""
               ((org-agenda-overriding-header "Habits")
                (org-agenda-sorting-strategy
                 '(todo-state-down effort-up category-keep))))
              (" " "Agenda"
               ((agenda "" nil)
                (tags "REFILE"
                      ((org-agenda-overriding-header "Tasks to Refile")
                       (org-tags-match-list-sublevels nil)))
                (tags-todo "-CANCELLED/!"
                           ((org-agenda-overriding-header "Stuck Projects")
                            (org-agenda-skip-function 'bh/skip-non-stuck-projects)
                            (org-agenda-sorting-strategy
                             '(category-keep))))
                (tags-todo "-HOLD-CANCELLED/!"
                           ((org-agenda-overriding-header "Projects")
                            (org-agenda-skip-function 'bh/skip-non-projects)
                            (org-tags-match-list-sublevels 'indented)
                            (org-agenda-sorting-strategy
                             '(category-keep))))
                (tags-todo "-CANCELLED/!NEXT"
                           ((org-agenda-overriding-header (concat "Project Next Tasks"
                                                                  (if bh/hide-scheduled-and-waiting-next-tasks
                                                                      ""
                                                                    " (including WAITING and SCHEDULED tasks)")))
                            (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                            (org-tags-match-list-sublevels t)
                            (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-sorting-strategy
                             '(todo-state-down effort-up category-keep))))
                (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                           ((org-agenda-overriding-header (concat "Project Subtasks"
                                                                  (if bh/hide-scheduled-and-waiting-next-tasks
                                                                      ""
                                                                    " (including WAITING and SCHEDULED tasks)")))
                            (org-agenda-skip-function 'bh/skip-non-project-tasks)
                            (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-sorting-strategy
                             '(category-keep))))
                (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                           ((org-agenda-overriding-header (concat "Standalone Tasks"
                                                                  (if bh/hide-scheduled-and-waiting-next-tasks
                                                                      ""
                                                                    " (including WAITING and SCHEDULED tasks)")))
                            (org-agenda-skip-function 'bh/skip-project-tasks)
                            (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-sorting-strategy
                             '(category-keep))))
                (tags-todo "-CANCELLED+WAITING|HOLD/!"
                           ((org-agenda-overriding-header (concat "Waiting and Postponed Tasks"
                                                                  (if bh/hide-scheduled-and-waiting-next-tasks
                                                                      ""
                                                                    " (including WAITING and SCHEDULED tasks)")))
                            (org-agenda-skip-function 'bh/skip-non-tasks)
                            (org-tags-match-list-sublevels nil)
                            (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)))
                (tags "-REFILE/"
                      ((org-agenda-overriding-header "Tasks to Archive")
                       (org-agenda-skip-function 'bh/skip-non-archivable-tasks)
                       (org-tags-match-list-sublevels nil))))
               nil))))
#+end_src
**** NEXT Update this to match custom templates
**** NEXT update function namespaces
*** TODO Agenda Filtering Based on tags
#+begin_src emacs-lisp
(defun bh/org-auto-exclude-function (tag)
  "Automatic task exclusion in the agenda with / RET"
  (and (cond
        ((string= tag "hold")
         t)
        ((string= tag "farm")
         t))
       (concat "-" tag)))

(setq org-agenda-auto-exclude-function 'bh/org-auto-exclude-function)
#+end_src
**** NEXT Replace ~farm~ with one or more custom tags to be selectively excluded from org agenda
*** TODO Org Clocking
#+begin_src emacs-lisp
;; Resume clocking task when emacs is restarted
(org-clock-persistence-insinuate)
;;
;; Show lot of clocking history so it's easy to pick items off the C-F11 list
(setq org-clock-history-length 23)
;; Resume clocking task on clock-in if the clock is open
(setq org-clock-in-resume t)
;; Change tasks to NEXT when clocking in
(setq org-clock-in-switch-to-state 'bh/clock-in-to-next)
;; Separate drawers for clocking and logs
(setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
;; Save clock data and state changes and notes in the LOGBOOK drawer
(setq org-clock-into-drawer t)
;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
(setq org-clock-out-remove-zero-time-clocks t)
;; Clock out when moving task to a done state
(setq org-clock-out-when-done t)
;; Save the running clock and all clock history when exiting Emacs, load it on startup
(setq org-clock-persist t)
;; Do not prompt to resume an active clock
(setq org-clock-persist-query-resume nil)
;; Enable auto clock resolution for finding open clocks
(setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
;; Include current clocking task in clock reports
(setq org-clock-report-include-clocking-task t)

(setq bh/keep-clock-running nil)

(defun bh/clock-in-to-next (kw)
  "Switch a task from TODO to NEXT when clocking in.
Skips capture tasks, projects, and subprojects.
Switch projects and subprojects from NEXT back to TODO"
  (when (not (and (boundp 'org-capture-mode) org-capture-mode))
    (cond
     ((and (member (org-get-todo-state) (list "TODO"))
           (bh/is-task-p))
      "NEXT")
     ((and (member (org-get-todo-state) (list "NEXT"))
           (bh/is-project-p))
      "TODO"))))

(defun bh/find-project-task ()
  "Move point to the parent (project) task if any"
  (save-restriction
    (widen)
    (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
      (while (org-up-heading-safe)
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq parent-task (point))))
      (goto-char parent-task)
      parent-task)))

(defun bh/punch-in (arg)
  "Start continuous clocking and set the default task to the
selected task.  If no task is selected set the Organization task
as the default task."
  (interactive "p")
  (setq bh/keep-clock-running t)
  (if (equal major-mode 'org-agenda-mode)
      ;;
      ;; We're in the agenda
      ;;
      (let* ((marker (org-get-at-bol 'org-hd-marker))
             (tags (org-with-point-at marker (org-get-tags-at))))
        (if (and (eq arg 4) tags)
            (org-agenda-clock-in '(16))
          (bh/clock-in-organization-task-as-default)))
    ;;
    ;; We are not in the agenda
    ;;
    (save-restriction
      (widen)
      ; Find the tags on the current task
      (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
          (org-clock-in '(16))
        (bh/clock-in-organization-task-as-default)))))

(defun bh/punch-out ()
  (interactive)
  (setq bh/keep-clock-running nil)
  (when (org-clock-is-active)
    (org-clock-out))
  (org-agenda-remove-restriction-lock))

(defun bh/clock-in-default-task ()
  (save-excursion
    (org-with-point-at org-clock-default-task
      (org-clock-in))))

(defun bh/clock-in-parent-task ()
  "Move point to the parent (project) task if any and clock in"
  (let ((parent-task))
    (save-excursion
      (save-restriction
        (widen)
        (while (and (not parent-task) (org-up-heading-safe))
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq parent-task (point))))
        (if parent-task
            (org-with-point-at parent-task
              (org-clock-in))
          (when bh/keep-clock-running
            (bh/clock-in-default-task)))))))

(defvar bh/organization-task-id "eb155a82-92b2-4f25-a3c6-0304591af2f9")

(defun bh/clock-in-organization-task-as-default ()
  (interactive)
  (org-with-point-at (org-id-find bh/organization-task-id 'marker)
    (org-clock-in '(16))))

(defun bh/clock-out-maybe ()
  (when (and bh/keep-clock-running
             (not org-clock-clocking-in)
             (marker-buffer org-clock-default-task)
             (not org-clock-resolving-clocks-due-to-idleness))
    (bh/clock-in-parent-task)))

(add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)
#+end_src
**** NEXT Fix Namespaces
#+begin_src emacs-lisp
(require 'org-id)
(defun bh/clock-in-task-by-id (id)
  "Clock in a task by id"
  (org-with-point-at (org-id-find id 'marker)
    (org-clock-in nil)))

(defun bh/clock-in-last-task (arg)
  "Clock in the interrupted task if there is one
Skip the default task and get the next one.
A prefix arg forces clock in of the default task."
  (interactive "p")
  (let ((clock-in-to-task
         (cond
          ((eq arg 4) org-clock-default-task)
          ((and (org-clock-is-active)
                (equal org-clock-default-task (cadr org-clock-history)))
           (caddr org-clock-history))
          ((org-clock-is-active) (cadr org-clock-history))
          ((equal org-clock-default-task (car org-clock-history)) (cadr org-clock-history))
          (t (car org-clock-history)))))
    (widen)
    (org-with-point-at clock-in-to-task
      (org-clock-in nil))))
#+end_src
***** NEXT Find out if clock in id is usefull
***** NEXT Fix Namespaces
***** NEXT Create ~(s-t)~ time tracking hydra?
*** TODO Log Time in discrete minute intervals
#+begin_src emacs-lisp
(setq org-time-stamp-rounding-minutes (quote (1 1)))
#+end_src
*** TODO Log time consistency check
#+begin_src emacs-lisp
(setq org-agenda-clock-consistency-checks
      (quote (:max-duration "4:00"
              :min-duration 0
              :max-gap 0
              :gap-ok-around ("4:00"))))
#+end_src
**** NEXT Confirm what the 4:00 setting does
*** TODO Configure Org Clock monthly Report
#+begin_src emacs-lisp
;; Agenda clock report parameters
(setq org-agenda-clockreport-parameter-plist
      (quote (:link t :maxlevel 5 :fileskip0 t :compact t :narrow 80)))
;; Agenda log mode items to display (closed and state changes by default)
(setq org-agenda-log-mode-items (quote (closed state)))
#+end_src
**** NEXT Incorporate this into a GTD style /monthly review/
*** TODO Log time in hours only
#+begin_src emacs-lisp
(setq org-time-clocksum-format
      '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))
#+end_src







*** TODO Configure agenda / diary integration
#+begin_src emacs-lisp
(setq org-agenda-include-diary nil)
(setq org-agenda-diary-file "~/git/org/diary.org")
(setq org-agenda-insert-diary-extract-time t)
#+end_src
**** NEXT Decide how to use diary.
**** NEXT update path
*** TODO Agenda Sorting
#+begin_src emacs-lisp
;; Show all future entries for repeating tasks
(setq org-agenda-repeating-timestamp-show-all t)

;; Show all agenda dates - even if they are empty
(setq org-agenda-show-all-dates t)

;; Sorting order for tasks on the agenda
(setq org-agenda-sorting-strategy
      (quote ((agenda habit-down time-up user-defined-up effort-up category-keep)
              (todo category-up effort-up)
              (tags category-up effort-up)
              (search category-up))))

;; Start the weekly agenda on Monday
(setq org-agenda-start-on-weekday 1)

;; Enable display of the time grid so we can see the marker for the current time
(setq org-agenda-time-grid (quote ((daily today remove-match)
                                   #("----------------" 0 16 (org-heading t))
                                   (0900 1100 1300 1500 1700))))

;; Display tags farther right
(setq org-agenda-tags-column -102)

;;
;; Agenda sorting functions
;;
(setq org-agenda-cmp-user-defined 'bh/agenda-sort)

(defun bh/agenda-sort (a b)
  "Sorting strategy for agenda items.
Late deadlines first, then scheduled, then non-late deadlines"
  (let (result num-a num-b)
    (cond
     ; time specific items are already sorted first by org-agenda-sorting-strategy

     ; non-deadline and non-scheduled items next
     ((bh/agenda-sort-test 'bh/is-not-scheduled-or-deadline a b))

     ; deadlines for today next
     ((bh/agenda-sort-test 'bh/is-due-deadline a b))

     ; late deadlines next
     ((bh/agenda-sort-test-num 'bh/is-late-deadline '> a b))

     ; scheduled items for today next
     ((bh/agenda-sort-test 'bh/is-scheduled-today a b))

     ; late scheduled items next
     ((bh/agenda-sort-test-num 'bh/is-scheduled-late '> a b))

     ; pending deadlines last
     ((bh/agenda-sort-test-num 'bh/is-pending-deadline '< a b))

     ; finally default to unsorted
     (t (setq result nil)))
    result))

(defmacro bh/agenda-sort-test (fn a b)
  "Test for agenda sort"
  `(cond
    ; if both match leave them unsorted
    ((and (apply ,fn (list ,a))
          (apply ,fn (list ,b)))
     (setq result nil))
    ; if a matches put a first
    ((apply ,fn (list ,a))
     (setq result -1))
    ; otherwise if b matches put b first
    ((apply ,fn (list ,b))
     (setq result 1))
    ; if none match leave them unsorted
    (t nil)))

(defmacro bh/agenda-sort-test-num (fn compfn a b)
  `(cond
    ((apply ,fn (list ,a))
     (setq num-a (string-to-number (match-string 1 ,a)))
     (if (apply ,fn (list ,b))
         (progn
           (setq num-b (string-to-number (match-string 1 ,b)))
           (setq result (if (apply ,compfn (list num-a num-b))
                            -1
                          1)))
       (setq result -1)))
    ((apply ,fn (list ,b))
     (setq result 1))
    (t nil)))

(defun bh/is-not-scheduled-or-deadline (date-str)
  (and (not (bh/is-deadline date-str))
       (not (bh/is-scheduled date-str))))

(defun bh/is-due-deadline (date-str)
  (string-match "Deadline:" date-str))

(defun bh/is-late-deadline (date-str)
  (string-match "\\([0-9]*\\) d\. ago:" date-str))

(defun bh/is-pending-deadline (date-str)
  (string-match "In \\([^-]*\\)d\.:" date-str))

(defun bh/is-deadline (date-str)
  (or (bh/is-due-deadline date-str)
      (bh/is-late-deadline date-str)
      (bh/is-pending-deadline date-str)))

(defun bh/is-scheduled (date-str)
  (or (bh/is-scheduled-today date-str)
      (bh/is-scheduled-late date-str)))

(defun bh/is-scheduled-today (date-str)
  (string-match "Scheduled:" date-str))

(defun bh/is-scheduled-late (date-str)
  (string-match "Sched\.\\(.*\\)x:" date-str))
#+end_src
**** NEXT test each to see if any are useful
*** TODO enable opening multiple agendas together
#+begin_src emacs-lisp
;; Use sticky agenda's so they persist
(setq org-agenda-sticky t)
#+end_src
*** TODO Only display tasks due within 30 days
#+begin_src emacs-lisp
(setq org-deadline-warning-days 30)
#+end_src
**** TODO Recurring tasks can be configured to only appear on the specific day with the timerstamp
#+begin_src emacs-lisp
 DEADLINE: <2009-07-01 Wed +1m -0d>
#+end_src
*** TODO Time Logging Settings
#+begin_src emacs-lisp
(setq org-log-done (quote time))
(setq org-log-into-drawer t)
(setq org-log-state-notes-insert-after-drawers nil)
#+end_src
*** TODO Configure Org habit display
#+begin_src emacs-lisp
; position the habit graph on the agenda to the right of the default
(setq org-habit-graph-column 50)

(run-at-time "05:00" 86400 '(lambda () (setq org-habit-show-habits t)))
#+end_src
**** TODO figure out how to use ~run-at-time~ for other stuff
*** TODO Configure agenda display.
#+begin_src emacs-lisp
(setq org-agenda-persistent-filter t)

(setq org-tags-match-list-sublevels t)

(setq org-agenda-skip-additional-timestamps-same-entry t)
#+end_src
**** TODO check if tag sublevel is usefull
**** TODO Consider auto resetting filters daily
**** TODO [[https://protesilaos.com/codelog/2021-12-09-emacs-org-block-agenda/][Example Org Agenda Config]]
*** TODO Automatically convert ~next~ tasks to projects
#+begin_src emacs-lisp
(defun bh/mark-next-parent-tasks-todo ()
  "Visit each parent task and change NEXT states to TODO"
  (let ((mystate (or (and (fboundp 'org-state)
                          state)
                     (nth 2 (org-heading-components)))))
    (when mystate
      (save-excursion
        (while (org-up-heading-safe)
          (when (member (nth 2 (org-heading-components)) (list "NEXT"))
            (org-todo "TODO")))))))

(add-hook 'org-after-todo-state-change-hook 'bh/mark-next-parent-tasks-todo 'append)
(add-hook 'org-clock-in-hook 'bh/mark-next-parent-tasks-todo 'append)
#+end_src
**** NEXT Update namespaces
** TODO Configure Org-Roam
- https://discourse.nixos.org/t/how-to-install-org-roam-declaratively-doom-emacs/24459/9
*** TODO Org Roam Bibtex
- https://github.com/org-roam/org-roam-bibtex
- Extends Org-Roam to support citations. Works along with ~helm-bibtex~
**** TODO Install ~helm-bibtex~
*** TODO Org Roam UI
- https://github.com/org-roam/org-roam-ui
***** General Notes
- A graphical front end to display connections between existing nodes
- Opens in your default web browser

*** TODO Org Bibtex
- [[https://www.jonathanleroux.org/bibtex-mode.html#0300][Installing Bibtex]]
**** TODO Integrate Org-Bibtex with Org-Roam
** TODO Configure Supporting Org stuff
*** TODO Bibtex
*** TODO LaTex
*** TODO Graphviz
*** TODO hugo
- [[https://willschenk.com/howto/2019/using_org_mode_in_hugo/][Using Hugo with Org Mode]]
*** TODO Configure Org Mode Stuck Projects
#+begin_src emacs-lisp
(setq org-stuck-projects (quote ("" nil nil "")))
#+end_src
*** TODO Configure Projects
#+begin_src emacs-lisp
(defun bh/is-project-p ()
  "Any task with a todo keyword subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task has-subtask))))

(defun bh/is-project-subtree-p ()
  "Any task with a todo keyword that is in a project subtree.
Callers of this function already widen the buffer view."
  (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                              (point))))
    (save-excursion
      (bh/find-project-task)
      (if (equal (point) task)
          nil
        t))))

(defun bh/is-task-p ()
  "Any task with a todo keyword and no subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task (not has-subtask)))))

(defun bh/is-subproject-p ()
  "Any task which is a subtask of another project"
  (let ((is-subproject)
        (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
    (save-excursion
      (while (and (not is-subproject) (org-up-heading-safe))
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq is-subproject t))))
    (and is-a-task is-subproject)))

(defun bh/list-sublevels-for-projects-indented ()
  "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
  This is normally used by skipping functions where this variable is already local to the agenda."
  (if (marker-buffer org-agenda-restrict-begin)
      (setq org-tags-match-list-sublevels 'indented)
    (setq org-tags-match-list-sublevels nil))
  nil)

(defun bh/list-sublevels-for-projects ()
  "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
  This is normally used by skipping functions where this variable is already local to the agenda."
  (if (marker-buffer org-agenda-restrict-begin)
      (setq org-tags-match-list-sublevels t)
    (setq org-tags-match-list-sublevels nil))
  nil)

(defvar bh/hide-scheduled-and-waiting-next-tasks t)

(defun bh/toggle-next-task-display ()
  (interactive)
  (setq bh/hide-scheduled-and-waiting-next-tasks (not bh/hide-scheduled-and-waiting-next-tasks))
  (when  (equal major-mode 'org-agenda-mode)
    (org-agenda-redo))
  (message "%s WAITING and SCHEDULED NEXT Tasks" (if bh/hide-scheduled-and-waiting-next-tasks "Hide" "Show")))

(defun bh/skip-stuck-projects ()
  "Skip trees that are not stuck projects"
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (if (bh/is-project-p)
          (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                 (has-next ))
            (save-excursion
              (forward-line 1)
              (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                (unless (member "WAITING" (org-get-tags-at))
                  (setq has-next t))))
            (if has-next
                nil
              next-headline)) ; a stuck project, has subtasks but no next task
        nil))))

(defun bh/skip-non-stuck-projects ()
  "Skip trees that are not stuck projects"
  ;; (bh/list-sublevels-for-projects-indented)
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (if (bh/is-project-p)
          (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                 (has-next ))
            (save-excursion
              (forward-line 1)
              (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                (unless (member "WAITING" (org-get-tags-at))
                  (setq has-next t))))
            (if has-next
                next-headline
              nil)) ; a stuck project, has subtasks but no next task
        next-headline))))

(defun bh/skip-non-projects ()
  "Skip trees that are not projects"
  ;; (bh/list-sublevels-for-projects-indented)
  (if (save-excursion (bh/skip-non-stuck-projects))
      (save-restriction
        (widen)
        (let ((subtree-end (save-excursion (org-end-of-subtree t))))
          (cond
           ((bh/is-project-p)
            nil)
           ((and (bh/is-project-subtree-p) (not (bh/is-task-p)))
            nil)
           (t
            subtree-end))))
    (save-excursion (org-end-of-subtree t))))

(defun bh/skip-non-tasks ()
  "Show non-project tasks.
Skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((bh/is-task-p)
        nil)
       (t
        next-headline)))))

(defun bh/skip-project-trees-and-habits ()
  "Skip trees that are projects"
  (save-restriction
    (widen)
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((bh/is-project-p)
        subtree-end)
       ((org-is-habit-p)
        subtree-end)
       (t
        nil)))))

(defun bh/skip-projects-and-habits-and-single-tasks ()
  "Skip trees that are projects, tasks that are habits, single non-project tasks"
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((org-is-habit-p)
        next-headline)
       ((and bh/hide-scheduled-and-waiting-next-tasks
             (member "WAITING" (org-get-tags-at)))
        next-headline)
       ((bh/is-project-p)
        next-headline)
       ((and (bh/is-task-p) (not (bh/is-project-subtree-p)))
        next-headline)
       (t
        nil)))))

(defun bh/skip-project-tasks-maybe ()
  "Show tasks related to the current restriction.
When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
When not restricted, skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
           (next-headline (save-excursion (or (outline-next-heading) (point-max))))
           (limit-to-project (marker-buffer org-agenda-restrict-begin)))
      (cond
       ((bh/is-project-p)
        next-headline)
       ((org-is-habit-p)
        subtree-end)
       ((and (not limit-to-project)
             (bh/is-project-subtree-p))
        subtree-end)
       ((and limit-to-project
             (bh/is-project-subtree-p)
             (member (org-get-todo-state) (list "NEXT")))
        subtree-end)
       (t
        nil)))))

(defun bh/skip-project-tasks ()
  "Show non-project tasks.
Skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((bh/is-project-p)
        subtree-end)
       ((org-is-habit-p)
        subtree-end)
       ((bh/is-project-subtree-p)
        subtree-end)
       (t
        nil)))))

(defun bh/skip-non-project-tasks ()
  "Show project tasks.
Skip project and sub-project tasks, habits, and loose non-project tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
           (next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((bh/is-project-p)
        next-headline)
       ((org-is-habit-p)
        subtree-end)
       ((and (bh/is-project-subtree-p)
             (member (org-get-todo-state) (list "NEXT")))
        subtree-end)
       ((not (bh/is-project-subtree-p))
        subtree-end)
       (t
        nil)))))

(defun bh/skip-projects-and-habits ()
  "Skip trees that are projects and tasks that are habits"
  (save-restriction
    (widen)
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((bh/is-project-p)
        subtree-end)
       ((org-is-habit-p)
        subtree-end)
       (t
        nil)))))

(defun bh/skip-non-subprojects ()
  "Skip trees that are not projects"
  (let ((next-headline (save-excursion (outline-next-heading))))
    (if (bh/is-subproject-p)
        nil
      next-headline)))
#+end_src
**** NEXT Fix NameSpaces
**** NEXT Confirm what each function does.
*** TODO Archiving
#+begin_src emacs-lisp
(setq org-archive-mark-done nil)
(setq org-archive-location "%s_archive::* Archived Tasks")

(defun Tn/skip-non-archivable-tasks ()
  "Skip trees that are not available for archiving"
  (save-restriction
    (widen)
    ;; Consider only tasks with done todo headings as archivable candidates
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max))))
          (subtree-end (save-excursion (org-end-of-subtree t))))
      (if (member (org-get-todo-state) org-todo-keywords-1)
          (if (member (org-get-todo-state) org-done-keywords)
              (let* ((daynr (string-to-int (format-time-string "%d" (current-time))))
                     (a-month-ago (* 60 60 24 (+ daynr 1)))
                     (last-month (format-time-string "%Y-%m-" (time-subtract (current-time) (seconds-to-time a-month-ago))))
                     (this-month (format-time-string "%Y-%m-" (current-time)))
                     (subtree-is-current (save-excursion
                                           (forward-line 1)
                                           (and (< (point) subtree-end)
                                                (re-search-forward (concat last-month "\\|" this-month) subtree-end t)))))
                (if subtree-is-current
                    subtree-end ; Has a date in this month or last month, skip it
                  nil))  ; available to archive
            (or subtree-end (point-max)))
        next-headline))))
#+end_src
**** NEXT Confirm use case
**** NEXT update target sub heading
*** TODO Org Flash Cards
*** TODO [[https://github.com/nobiot/org-transclusion#original-idea-by-john-kitchin][Org Transclusion]]
** TODO Configure Magit
- https://github.com/dandavison/magit-delta
** TODO Configure interaction with non-emacs programs
*** TODO Use Google Calendar notifications for appointment reminders
*** TODO exorcism (programming tutorial)
*** TODO OpenSCAD
*** TODO bluetooth manager using [[https://github.com/emacsmirror/bluetooth][bluetooth.el]]
*** TODO Improve Firefox integration
**** TODO integrate tridactyl and emacs exwm-firefox-evil
- [[https://codeberg.org/emacs-weirdware/exwm-firefox/src/branch/main/exwm-firefox.el][EXWM FireFox]]
- [[https://github.com/walseb/exwm-firefox-core][exwm firefox core]]
**** TODO increase default text size of tridactyl windows
**** TODO create hot key to open bookmarks manager
**** TODO create hot key to open current page in eww
**** TODO rebind tridactyl tab to space
**** TODO configure RES and youtube keybindings
**** TODO Helm-FireFox
**** TODO enable arrow keys in buffer list
**** TODO rebind =b= to show all tabs in all windows =(B)=.
**** TODO create keybinding to open favorites list
**** TODO Integrate Google Drive with Emacs
- https://emacsnotes.wordpress.com/2018/07/08/your-google-drive-now-within-your-emacs/
*** TODO Emacs Communication Suite
**** TODO Polybar Notifications
- Systemcrafter polybar video
**** TODO Emacs Email Client
**** TODO WeeChat or similar
***** TODO Discord
***** TODO Matrix
***** TODO Slack
***** TODO Mastadon?
- [[https://blog.nawaz.org/posts/2022/Dec/rendering-latex-formulae-in-mastodonel/][Adding LaTeX to Mastadon]]
***** TODO Reddit?
***** TODO Tumbler?
***** TODO HootSuite (just curious)
**** TODO Big Brother Data Base
- Follow up when I am configuring Communication and news stuff
**** TODO Integrate Other communications programs with emacs
***** TODO Email
****** TODO Google Voice via Email
***** TODO Twitter (?)
***** TODO Mastadon
***** TODO Tumbler (?)
***** TODO Reddit : https://www.reddit.com/r/emacs/comments/eaf2r0/how_i_use_reddit_from_inside_emacs/
***** Discord
****** TODO Integrate Discord with Emacs
***** Wee Chat
****** TODO Compare Weechat with other graphical clients
****** TODO Integrate IRC / Matrix with Emacs
*** TODO Integrate Contact lists using BBDB
- https://www.jwz.org/bbdb/
#+begin_src emacs-lisp
;; Capture templates for: TODO tasks, Notes, appointments, phone calls, and org-protocol
(setq org-capture-templates
      (quote (...
              ("p" "Phone call" entry (file "~/git/org/refile.org")
               "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
              ...)))

(require 'bbdb)
(require 'bbdb-com)

(global-set-key (kbd "<f9> p") 'bh/phone-call)

;;
;; Phone capture template handling with BBDB lookup
;; Adapted from code by Gregory J. Grubbs
(defun bh/phone-call ()
  "Return name and company info for caller from bbdb lookup"
  (interactive)
  (let* (name rec caller)
    (setq name (completing-read "Who is calling? "
                                (bbdb-hashtable)
                                'bbdb-completion-predicate
                                'confirm))
    (when (> (length name) 0)
      ; Something was supplied - look it up in bbdb
      (setq rec
            (or (first
                 (or (bbdb-search (bbdb-records) name nil nil)
                     (bbdb-search (bbdb-records) nil name nil)))
                name)))

    ; Build the bbdb link if we have a bbdb record, otherwise just return the name
    (setq caller (cond ((and rec (vectorp rec))
                        (let ((name (bbdb-record-name rec))
                              (company (bbdb-record-company rec)))
                          (concat "[[bbdb:"
                                  name "]["
                                  name "]]"
                                  (when company
                                    (concat " - " company)))))
                       (rec)
                       (t "NameOfCaller")))
    (insert caller)))
#+end_src
** TODO figure out how to install allusion and pureref
- wget to download the appImage locally
- then script to add to Nix-store
- ^ added to upgrade script, and first time install?
- https://allusion-app.github.io/
- https://www.pureref.com/
** TODO Manage Secrets
*** TODO encrypt files with Git crypt
*** TODO encrypt headings with org crypt
#+begin_src emacs-lisp
(require 'org-crypt)
; Encrypt all entries before saving
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance (quote ("crypt")))
; GPG key to use for encryption
(setq org-crypt-key "F0B66B40")

(setq org-crypt-disable-auto-save nil)
#+end_src
**** NEXT Check on ~org-crypt-key~
**** NEXT Find how to encrypt elisp files
*** TODO manage system secrets using nix-sops
** TODO Fix unclutter cursor hiding
** TODO clean and rebuild polybar
*** TODO have only current workspace number show on bar
*** TODO remove un-needed code
*** TODO change name

* Reading List
** Saved for later : using nvidia Graphics Drivers
Enables the use of a Nvidia Graphics card. Exports all graphics processing to the GPU.
#+begin_src nix
services.xserver.videoDrivers = [ "nvidia" ];
hardware.nvidia.modesetting.enable = true;
hardware.nvidia.prime = {
  sync.enable = true;
  nvidiaBusId = "PCI:01:00:0";  # Found with lspci | grep VGA
  intelBusId = "PCI:00:02:0";  # Found with lspci | grep VGA
};
#+end_src
** Blogs
*** [[http://doc.norang.ca/org-mode.html][Organizing your life in plain text]]
**** TODO Follow up with organizing your life in plain text 10.2, 16.3, 16.6
**** Projects
- A project is any todo heading with todo subheading
- Projects can be created at any sub heading level
- A project without a sub-heading marked as ~next~ will be added to a stuck projects list
**** Tags
- tags are used to filter todo's based on type
- Use tags to separate recurring and non recurring task in agenda view
- ~#+FILETAGS:~ Can be added at the top of a file to apply one or more tags to the entire file
- Tags can be grouped together so only one can be applied to a heading at a time.
- Tags can be added using the ~C-c C-q~ Hotkey
**** Interrupts
- Created in a completed state, Grouped as either digital (phone/text/email/ect) or in person.
- Tracked as part of an org capture template.
**** Capturing
- Minimal number of capture templates, all pointing to a single ~"inbox"~ org file. Part of dialy journal
  - Inbox file cleaned out daily
- Separate things to be captured into groups
  - Digital Sync Conversation
  - Digital A-Sync Conversation
  - In Person Conversation
  - New Task
  - New Habit (recurring Task)
  - New Note
  - Interruptions (short unexpected tasks, in the middle of a larger one(?))
**** Refilling
- Have a permanent section of the daily journal with this heading ~#+FILETAGS: REFILE~ where all org captures are stored until copied into their proper place.
- Ultimately this should be a part of the ROAM dailies template.
**** Clocking
- Create a default task that that will automatically be clocked into when not doing something else.
- When moving a clocked todo to done status. Org will automatically start clocking with the parent todo if there is one. Otherwise it returns to the default clock target.
**** Storing Todos
- Possibly create a series of files to store non project specific todos with file inheritance
  - Example Tag for file heading ~#+FILETAGS: PERSONAL~
**** Archives
- General tasks can be refilled into a ~Archive.org~
- Each ~project.org~ file should have a ~* Archived Tasks~ Sub-heading
- Tasks should be archived after being marked completed for more than 30 days.
- After an entire project is completed its directory should be moved into an archival directory.
- When creating a project the first task should describe the overall project and act as the final task to be closed.
file for the active year when a task is marked done

**** Heading Workflow
- http://doc.norang.ca/normal_task_states.png
*** [[https://lucidmanager.org/productivity/taking-notes-with-emacs-org-mode-and-org-roam/][Taking notes with org-mode and org-roam]]
*** [[https://ianthehenry.com/posts/how-to-learn-nix/][Ian Henry]]
*** [[https://www.haskellforall.com/2017/01/typed-nix-programming-using-dhall.html][Typed Nix Programming Using Dhall]]
*** [[https://github.com/tweag/nix_bazel_codelab/tree/main#nixbazel-codelab][Nix + Bazel]]
*** [[https://sachachua.com/dotemacs/index.html][Sasha Chuas Config]]
*** [[https://config.daviwil.com/emacs][David Wilson Config]]
*** [[https://github.com/Phundrak/dotfiles][Phundrak Config]]
*** [[https://github.com/tlater/dotfiles][TLater Config]]
*** [[https://karthinks.com/][Karthinks Blog]]
*** [[https://karl-voit.at/2020/06/14/Zettelkasten-concerns/][Zettlekasten Concerns]]
*** [[https://ebzzry.com/en/emacs-pairs/#introduction][Smart Parens and Indentation]]
** Books
*** [[https://gettingthingsdone.com/][Getting Things Done]]
*** [[https://www.amazon.com/Building-Second-Brain-Organize-Potential/dp/1982167386][Building a second brain]]
*** [[https://www.amazon.com/PARA-Method-Simplify-Organize-Digital-ebook/dp/B0C2QPWBP4][PARA Method]]
* Long Term
** TODO Finalize =README.org=
** TODO Write new blog article on config refactor
** TODO Figure out if Vortex can be used for streaming
** TODO Look into Modifying core system
*** TODO Repeatable disk partitioning using a machine specific script.
*** TODO Use of Zen kernel with older normal kernel fallback
*** TODO Use of ZFS for file system
- [[https://danieldk.eu/Posts/2019-05-01-NixOS-Dropbox-ZFS.html][Dropbox with ZFS]]
*** TODO Use of TMPFS and Impermance modules
*** TODO Use of Libreboot Bios
*** TODO Full disk encryption
** TODO Add these programs to work computer
- gimp-with-plugins
- inkscape-with-extensions
- davinci-resolve
- dark-table
- krita
- obs
- ffmpeg
- blind
** TODO Figure out how to create custom systemd services
- https://www.codyhiar.com/blog/repeated-tasks-with-systemd-service-timers-on-nixos/
*** TODO autolock screen when laptop lid is closed
- https://discourse.nixos.org/t/slock-when-suspend/22457/2
*** TODO auto run rebuild, upgrade, and clean nightly
** TODO Configure SSH to Use PGP
- https://rzetterberg.github.io/yubikey-gpg-nixos.html
- https://framagit.org/Glandos/bw-ssh/
** TODO Create a first time start up script
*** TODO First time ssh key set up
** TODO create a tmux + vim ssh config
*** TODO create a default vimrc
** TODO create script to enable wacom tablet driver and set bindings

#+begin_src nix
  home.file."wacom-tablet-bindings.sh" = {
    target = ".config/system-scripts/wacom-tablet-bindings.sh";
    executable = true;
    text = ''
      #!/bin/bash

      ## Upper group of exprss keys
      xsetwacom set "Wacom Intuos Pro L Pad pad" Button 1 "key tab"
      xsetwacom set "Wacom Intuos Pro L Pad pad" Button 3 "key +control s -control"
      xsetwacom set "Wacom Intuos Pro L Pad pad" Button 2 "key insert"
      xsetwacom set "Wacom Intuos Pro L Pad pad" Button 8 "key alt"

      ## Center Button
      xsetwacom set "Wacom Intuos Pro L Pad pad" Button 13 "key +control z -control"
      ### This configuration leaves the default zoom-in/out touch ring bindings

      ## Lower group of express keys
      xsetwacom set "Wacom Intuos Pro L Pad pad" Button 9 "key +shift"
      xsetwacom set "Wacom Intuos Pro L Pad pad" Button 10 "key +control"
      xsetwacom set "Wacom Intuos Pro L Pad pad" Button 11 "key +t"
      xsetwacom set "Wacom Intuos Pro L Pad pad" Button 12 "key +b"


      ## Pen Controls
      xsetwacom set "Wacom Intuos Pro L Pen stylus" Button 3 "Key +e" # Toggles eraser mode on/off
      xsetwacom set "Wacom Intuos Pro L Pen eraser" Button 1 "key +p" # Horizontally mirrors canvas <- Rebind this to something else. I dont like the eraser key
    '';
  };
#+end_src
** TODO Create custom themes
- https://github.com/doomemacs/themes/blob/master/themes/doom-city-lights-theme.el
*** TODO Allacritty
*** TODO Zsh
*** TODO Starship
*** TODO SSDM
** TODO Find a free and feature matched self hoasted alternative to gsuite, and bitwarden
** TODO Find a better way to ID active buffer
- Create a secondary modeline that is only a 2px colored line. that goes gray when buffer is inactive.
** TODO Add LLM Style Interaction
- https://github.com/zerolfx/copilot.el
** TODO Learn How to Create Dev Env with Nix
- [[https://determinate.systems/posts/nix-direnv][Nix-Direnv]]
** TODO Advanced EXWM Config
- [[https://tech.toryanderson.com/2021/01/08/adding-a-new-monitor-to-my-exwm-setup/][Multi Monitor EXWM]]
- [[https://github.com/johanwiden/exwm-setup#overview-of-the-setup][EXWM Example Config]]
- [[https://sqrtminusone.xyz/posts/2022-01-03-exwm/][EXWM and Perspective]]
- [[https://github.com/johanwiden/exwm-setup#overview-of-the-setup][EXWM Advanced Configuration]]
** TODO Fitness and Nutrition Tracking with Emacs
- https://gist.github.com/alphapapa/982467abc1bf29f57c5cd2c408a77bd5
- https://gist.github.com/iocanel/0b8bcdb3d69fb7731069cb872f836507
