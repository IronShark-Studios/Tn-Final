#+TITLE: System Tangle File
#+DESCRIPTION: Temporary file containt all shared files for a nix flake. Go be re organized later.
#+PROPERTY: :tangle yes :noweb yes

* flake.nix
:PROPERTIES:
:header-args: :tangle ./flake.nix
:END:

#+begin_src nix
{
  description = "Configuration for personal travel laptop.";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    nixpkgs-static.url = "github:nixos/nixpkgs/nixos-23.05";

    home-manager.url = "github:nix-community/home-manager";
    home-manager-static.url = "github:nix-community/home-manager/release-23.05";
    home-manager.inputs.nixpkgs.follows = "nixpkgs";

    nixos-hardware.url = "github:nixos/nixos-hardware";
    nixos-hardware.inputs.nixpkgs.follows = "nixpkgs";

    sops-nix.url = "github:Mic92/sops-nix";
    sops-nix.inputs.nixpkgs.follows = "nixpkgs";

    emacs-community.url = "github:nix-community/emacs-overlay";
    emacs-community.inputs.nixpkgs.follows = "nixpkgs";
  };

  outputs = { self, nixpkgs, home-manager, nixos-hardware, sops-nix, emacs-community, ... }@inputs:
   let
      inherit (self) outputs;
      forAllSystems = nixpkgs.lib.genAttrs [
        "x86_64-linux"
      ];
    in
    rec {

  overlays = import ./Flake/Overlays { inherit inputs; };
  nixosModules = import ./Flake/Modules/Nixos;
  homeManagerModules = import ./Flake/Modules/Home-Manager;

  nixosConfigurations = {
    Voyager = nixpkgs.lib.nixosSystem {
      specialArgs = { inherit inputs outputs; };
      modules = [
        nixos-hardware.nixosModules.lenovo-thinkpad-t430
        sops-nix.nixosModules.sops
        home-manager.nixosModules.home-manager
        ./System/NixOS/configuration.nix
      ];
    };
  };
};
}
#+end_src

* Flake

** Modules

*** NixOS

**** default.nix
:PROPERTIES:
:header-args: :tangle ./Flake/Modules/NixOS/default.nix
:END:

#+begin_src nix
# Add your reusable NixOS modules to this directory, on their own file (https://nixos.wiki/wiki/Module).
# These should be stuff you would like to share with others, not your personal configurations.

{
  # List your module files here
  # my-module = import ./my-module.nix;
}
#+end_src

*** Home-Manager

**** default.nix
:PROPERTIES:
:header-args: :tangle ./Flake/Modules/Home-Manager/default.nix
:END:

#+begin_src nix
# Add your reusable home-manager modules to this directory, on their own file (https://nixos.wiki/wiki/Module).
# These should be stuff you would like to share with others, not your personal configurations.

{
  # List your module files here
  # my-module = import ./my-module.nix;
}
#+end_src

** Packages
:PROPERTIES:
:header-args: :tangle ./Flake/Packages/default.nix
:END:

#+begin_src nix
# Custom packages, that can be defined similarly to ones from nixpkgs
# You can build them using 'nix build .#example' or (legacy) 'nix-build -A example'

{ pkgs ? (import ../nixpkgs.nix) { } }: {
  # example = pkgs.callPackage ./example { };
}
#+end_src

** Overlays
:PROPERTIES:
:header-args: :tangle ./Flake/Overlays/default.nix
:END:

#+begin_src nix
# This file defines overlays
{ inputs, ... }:
{
  # This one brings our custom packages from the 'pkgs' directory
  additions = final: _prev: import ../Packages { pkgs = final; };

  # This one contains whatever you want to overlay
  # You can change versions, add patches, set compilation flags, anything really.
  # https://nixos.wiki/wiki/Overlays
  modifications = final: prev: {
    # example = prev.example.overrideAttrs (oldAttrs: rec {
    # ...
    # });
  };

  # When applied, the unstable nixpkgs set (declared in the flake inputs) will
  # be accessible through 'pkgs.static-nxpkgs'
  static-nxpkgs = final: _prev: {
    nx-static = import inputs.nixpkgs-static {
      system = final.system;
      config.allowUnfree = true;
    };
  };

 # Creates a subset of home-manager pkgs tied to a specific release.
 # Accessible with 'pkgs.static-hmpkgs'.
  static-hmpkgs = final: _prev: {
    hm-static = import inputs.home-manager-static {
      system = final.system;
      config.allowUnfree = true;
    };
  };
}
#+end_src
** nixpkgs.nix
:PROPERTIES:
:header-args: :tangle ./Flake/nixpkgs.nix
:END:

#+begin_src nix
# A nixpkgs instance that is grabbed from the pinned nixpkgs commit in the lock file
# This is useful to avoid using channels when using legacy nix commands
let lock = (builtins.fromJSON (builtins.readFile ./flake.lock)).nodes.nixpkgs.locked;
in
import (fetchTarball {
  url = "https://github.com/nixos/nixpkgs/archive/${lock.rev}.tar.gz";
  sha256 = lock.narHash;
})
#+end_src

** shell.nix
:PROPERTIES:
:header-args: :tangle ./Flake/shell.nix
:END:

#+begin_src nix
# Shell for bootstrapping flake-enabled nix and home-manager
# You can enter it through 'nix develop' or (legacy) 'nix-shell'

{ pkgs ? (import ./nixpkgs.nix) { } }: {
  default = pkgs.mkShell {
    # Enable experimental features without having to specify the argument
    NIX_CONFIG = "experimental-features = nix-command flakes";
    nativeBuildInputs = with pkgs; [ nix home-manager git ];
  };
}
#+end_src
